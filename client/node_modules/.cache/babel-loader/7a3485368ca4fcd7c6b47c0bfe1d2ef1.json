{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cyrie\\\\Documents\\\\Projets\\\\turboquizz\\\\client\\\\src\\\\pages\\\\Learn.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport \"./css/Learn.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Learn = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [words, setWords] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [options, setOptions] = useState([]);\n  const [progress, setProgress] = useState(0);\n  useEffect(() => {\n    fetch(\"http://localhost:5000/api/lists\").then(response => response.json()).then(data => {\n      const list = data.find(l => l.id === parseInt(id));\n      if (list) {\n        setWords(list.words);\n        setCurrentIndex(0);\n        generateOptions(list.words[0].definition, list.words);\n      }\n    }).catch(error => console.error(\"Erreur chargement liste:\", error));\n  }, [id]);\n\n  // Mélange aléatoire d'un tableau\n  const shuffleArray = array => array.sort(() => Math.random() - 0.5);\n\n  // Générer 4 options avec une bonne réponse et 3 mauvaises\n  const generateOptions = (correctDefinition, allWords) => {\n    let definitions = allWords.map(w => w.definition);\n    let incorrectOptions = definitions.filter(def => def !== correctDefinition);\n    let randomOptions = shuffleArray(incorrectOptions).slice(0, 3);\n    let finalOptions = shuffleArray([...randomOptions, correctDefinition]);\n    setOptions(finalOptions);\n  };\n\n  // Gestion du clic sur une réponse\n  const handleAnswerClick = selected => {\n    if (currentIndex < words.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n      generateOptions(words[currentIndex + 1].definition, words);\n      setProgress((currentIndex + 1) / words.length * 100);\n    } else {\n      alert(\"Fin de l'apprentissage !\");\n      navigate(`/list/${id}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"learn-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"exit-button\",\n      onClick: () => navigate(`/list/${id}`),\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-x-lg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      now: progress,\n      label: `${Math.round(progress)}%`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), words.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"term\",\n        children: words[currentIndex].term\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options\",\n        children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"option-button\",\n          onClick: () => handleAnswerClick(option),\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(Learn, \"iPbFD6LRQ8OjkPibCCrhtAJaKI4=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Learn;\nexport default Learn;\nvar _c;\n$RefreshReg$(_c, \"Learn\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","ProgressBar","jsxDEV","_jsxDEV","Fragment","_Fragment","Learn","_s","id","navigate","words","setWords","currentIndex","setCurrentIndex","options","setOptions","progress","setProgress","fetch","then","response","json","data","list","find","l","parseInt","generateOptions","definition","catch","error","console","shuffleArray","array","sort","Math","random","correctDefinition","allWords","definitions","map","w","incorrectOptions","filter","def","randomOptions","slice","finalOptions","handleAnswerClick","selected","length","alert","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","now","label","round","term","option","index","_c","$RefreshReg$"],"sources":["C:/Users/cyrie/Documents/Projets/turboquizz/client/src/pages/Learn.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport \"./css/Learn.css\";\r\n\r\nconst Learn = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const [words, setWords] = useState([]);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [options, setOptions] = useState([]);\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    useEffect(() => {\r\n        fetch(\"http://localhost:5000/api/lists\")\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                const list = data.find((l) => l.id === parseInt(id));\r\n                if (list) {\r\n                    setWords(list.words);\r\n                    setCurrentIndex(0);\r\n                    generateOptions(list.words[0].definition, list.words);\r\n                }\r\n            })\r\n            .catch((error) => console.error(\"Erreur chargement liste:\", error));\r\n    }, [id]);\r\n\r\n    // Mélange aléatoire d'un tableau\r\n    const shuffleArray = (array) => array.sort(() => Math.random() - 0.5);\r\n\r\n    // Générer 4 options avec une bonne réponse et 3 mauvaises\r\n    const generateOptions = (correctDefinition, allWords) => {\r\n        let definitions = allWords.map(w => w.definition);\r\n        let incorrectOptions = definitions.filter(def => def !== correctDefinition);\r\n        let randomOptions = shuffleArray(incorrectOptions).slice(0, 3);\r\n        let finalOptions = shuffleArray([...randomOptions, correctDefinition]);\r\n        setOptions(finalOptions);\r\n    };\r\n\r\n    // Gestion du clic sur une réponse\r\n    const handleAnswerClick = (selected) => {\r\n        if (currentIndex < words.length - 1) {\r\n            setCurrentIndex(currentIndex + 1);\r\n            generateOptions(words[currentIndex + 1].definition, words);\r\n            setProgress(((currentIndex + 1) / words.length) * 100);\r\n        } else {\r\n            alert(\"Fin de l'apprentissage !\");\r\n            navigate(`/list/${id}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"learn-container\">\r\n            {/* Bouton de sortie */}\r\n            <button className=\"exit-button\" onClick={() => navigate(`/list/${id}`)}>\r\n                <i className=\"bi bi-x-lg\"></i>\r\n            </button>\r\n\r\n            {/* Barre de progression */}\r\n            <ProgressBar now={progress} label={`${Math.round(progress)}%`} />\r\n\r\n            {/* Affichage du terme */}\r\n            {words.length > 0 && (\r\n                <>\r\n                    <h2 className=\"term\">{words[currentIndex].term}</h2>\r\n                    <div className=\"options\">\r\n                        {options.map((option, index) => (\r\n                            <button key={index} className=\"option-button\" onClick={() => handleAnswerClick(option)}>\r\n                                {option}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Learn;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}