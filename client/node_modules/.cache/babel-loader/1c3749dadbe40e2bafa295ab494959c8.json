{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cyrie\\\\Documents\\\\Projets\\\\turboquizz\\\\client\\\\src\\\\pages\\\\Learn.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport \"./css/Learn.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Learn = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [list, setList] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [wordStats, setWordStats] = useState({});\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentExerciseType, setCurrentExerciseType] = useState(\"QCM_Term\");\n  const [options, setOptions] = useState([]);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [userInput, setUserInput] = useState(\"\");\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n  useEffect(() => {\n    fetch(`http://localhost:5000/api/lists`).then(response => response.json()).then(data => {\n      const selectedList = data.find(l => l.id === parseInt(id));\n      if (selectedList && selectedList.words.length > 0) {\n        setList(selectedList);\n        initializeWordStats(selectedList.words);\n        generateOptions(selectedList.words[0], selectedList.words, \"QCM_Term\");\n      } else {\n        console.error(\"Liste non trouv√©e ou vide.\");\n      }\n    }).catch(error => console.error(\"Erreur de chargement de la liste\", error));\n  }, [id]);\n  const initializeWordStats = words => {\n    const stats = {};\n    words.forEach((word, index) => {\n      stats[index] = {\n        termCorrectCount: 0,\n        // Compte les bonnes r√©ponses lorsque l'utilisateur doit trouver la d√©finition\n        definitionCorrectCount: 0,\n        // Compte les bonnes r√©ponses lorsque l'utilisateur doit trouver le terme\n        usedRecently: false\n      };\n    });\n    setWordStats(stats);\n  };\n  const generateOptions = (word, words, mode) => {\n    console.log(\"üîÑ Appel de generateOptions avec :\", {\n      word,\n      mode\n    });\n    if (!word || !words) {\n      console.warn(\"‚ùå Probl√®me : word ou words est undefined !\");\n      return;\n    }\n    let correctAnswer;\n    let incorrectAnswers;\n    if (mode === \"QCM_Term\") {\n      correctAnswer = word.definition;\n      incorrectAnswers = words.map(w => w.definition).filter(def => def !== correctAnswer);\n    } else if (mode === \"QCM_Definition\") {\n      correctAnswer = word.term;\n      incorrectAnswers = words.map(w => w.term).filter(term => term !== correctAnswer);\n    } else {\n      console.warn(\"‚ùå Mode inconnu :\", mode);\n      return;\n    }\n    if (incorrectAnswers.length < 3) {\n      console.warn(\"‚ö†Ô∏è Pas assez d'options incorrectes !\");\n    }\n    incorrectAnswers = incorrectAnswers.sort(() => Math.random() - 0.5).slice(0, 3);\n    const allOptions = [correctAnswer, ...incorrectAnswers].sort(() => Math.random() - 0.5);\n    console.log(\"‚úÖ Options g√©n√©r√©es :\", allOptions);\n    setOptions(allOptions);\n    setSelectedAnswer(null);\n    setIsCorrect(null);\n  };\n  const selectNextWord = () => {\n    if (!list || !list.words || Object.keys(wordStats).length === 0) {\n      console.warn(\"‚ùå Impossible de s√©lectionner un mot !\");\n      return;\n    }\n    let availableWords = Object.keys(wordStats).filter(i => !wordStats[i].usedRecently);\n    if (availableWords.length === 0) {\n      Object.keys(wordStats).forEach(i => wordStats[i].usedRecently = false);\n      availableWords = Object.keys(wordStats);\n    }\n    let nextIndex = availableWords[Math.floor(Math.random() * availableWords.length)];\n    wordStats[nextIndex].usedRecently = true;\n    setWordStats({\n      ...wordStats\n    });\n    setCurrentWordIndex(parseInt(nextIndex));\n    const stats = wordStats[nextIndex];\n    let exerciseType = stats.termCorrectCount <= stats.definitionCorrectCount ? \"QCM_Term\" : \"QCM_Definition\";\n    if (stats.termCorrectCount >= 2 && stats.definitionCorrectCount >= 2) {\n      exerciseType = \"Input\";\n    }\n    setCurrentExerciseType(exerciseType);\n    generateOptions(list.words[nextIndex], list.words, exerciseType);\n  };\n  const handleQCMChoice = selectedOption => {\n    if (!list) return;\n    let correctAnswer = currentExerciseType === \"QCM_Term\" ? list.words[currentWordIndex].definition : list.words[currentWordIndex].term;\n    if (![\"QCM_Term\", \"QCM_Definition\"].includes(currentExerciseType)) {\n      console.error(\"üö® Probl√®me : type d'exercice inconnu !\", currentExerciseType);\n      return;\n    }\n    const isAnswerCorrect = selectedOption === correctAnswer;\n    setSelectedAnswer(selectedOption);\n    setIsCorrect(isAnswerCorrect);\n    if (isAnswerCorrect) {\n      setWordStats(prevStats => ({\n        ...prevStats,\n        [currentWordIndex]: {\n          ...prevStats[currentWordIndex],\n          [currentExerciseType === \"QCM_Term\" ? \"termCorrectCount\" : \"definitionCorrectCount\"]: prevStats[currentWordIndex][currentExerciseType === \"QCM_Term\" ? \"termCorrectCount\" : \"definitionCorrectCount\"] + 1\n        }\n      }));\n    }\n    setTimeout(() => {\n      selectNextWord();\n    }, 1000);\n  };\n  const handleInputSubmit = () => {\n    if (!userInput.trim()) return;\n    setHasSubmitted(true);\n    let correctAnswer;\n    let statsField;\n    if (currentExerciseType === \"Input\") {\n      correctAnswer = list.words[currentWordIndex].term;\n      statsField = \"termCorrectCount\"; // üî• ERREUR corrig√©e ici\n    } else {\n      return;\n    }\n    const isAnswerCorrect = userInput.trim().toLowerCase() === correctAnswer.toLowerCase();\n    setIsCorrect(isAnswerCorrect);\n    if (isAnswerCorrect) {\n      wordStats[currentWordIndex][statsField] += 1;\n      setWordStats({\n        ...wordStats\n      });\n    }\n    setTimeout(() => {\n      selectNextWord();\n      setUserInput(\"\");\n      setIsCorrect(null);\n      setHasSubmitted(false);\n    }, 1000);\n  };\n  if (!list) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Chargement...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"learn-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"exit-button\",\n      onClick: () => navigate(`/list/${id}`),\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-x-lg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      now: progress,\n      label: `${Math.round(progress)}% completed`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"term\",\n      children: list.words[currentWordIndex].term\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), currentExerciseType === \"QCM\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-container\",\n      children: options.length > 0 ? options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `option-button ${selectedAnswer === option ? isCorrect ? \"correct\" : \"incorrect\" : \"\"}`,\n        onClick: () => handleQCMChoice(option),\n        disabled: selectedAnswer !== null,\n        children: [option, selectedAnswer === option && /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `bi ${isCorrect ? \"bi-check-lg\" : \"bi-x\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 37\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 29\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Chargement des options...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        placeholder: \"Write the answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleInputSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bi bi-arrow-up-circle-fill\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }, this), hasSubmitted && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: isCorrect ? \"correct-text\" : \"incorrect-text\",\n        children: isCorrect ? \"Correct !\" : `False, the good answer is : ${list.words[currentWordIndex].definition}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 9\n  }, this);\n};\n_s(Learn, \"YoWZTus30HpwToU77Wr22GzciUA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Learn;\nexport default Learn;\nvar _c;\n$RefreshReg$(_c, \"Learn\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","ProgressBar","jsxDEV","_jsxDEV","Learn","_s","id","navigate","list","setList","progress","setProgress","wordStats","setWordStats","currentWordIndex","setCurrentWordIndex","currentExerciseType","setCurrentExerciseType","options","setOptions","selectedAnswer","setSelectedAnswer","isCorrect","setIsCorrect","userInput","setUserInput","hasSubmitted","setHasSubmitted","fetch","then","response","json","data","selectedList","find","l","parseInt","words","length","initializeWordStats","generateOptions","console","error","catch","stats","forEach","word","index","termCorrectCount","definitionCorrectCount","usedRecently","mode","log","warn","correctAnswer","incorrectAnswers","definition","map","w","filter","def","term","sort","Math","random","slice","allOptions","selectNextWord","Object","keys","availableWords","i","nextIndex","floor","exerciseType","handleQCMChoice","selectedOption","includes","isAnswerCorrect","prevStats","setTimeout","handleInputSubmit","trim","statsField","toLowerCase","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","now","label","round","option","disabled","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/cyrie/Documents/Projets/turboquizz/client/src/pages/Learn.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport \"./css/Learn.css\";\r\n\r\nconst Learn = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const [list, setList] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [wordStats, setWordStats] = useState({});\r\n    const [currentWordIndex, setCurrentWordIndex] = useState(0);\r\n    const [currentExerciseType, setCurrentExerciseType] = useState(\"QCM_Term\");\r\n    const [options, setOptions] = useState([]);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [isCorrect, setIsCorrect] = useState(null);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [hasSubmitted, setHasSubmitted] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:5000/api/lists`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const selectedList = data.find(l => l.id === parseInt(id));\r\n                if (selectedList && selectedList.words.length > 0) {\r\n                    setList(selectedList);\r\n                    initializeWordStats(selectedList.words);\r\n                    generateOptions(selectedList.words[0], selectedList.words, \"QCM_Term\");\r\n                } else {\r\n                    console.error(\"Liste non trouv√©e ou vide.\");\r\n                }\r\n            })\r\n            .catch(error => console.error(\"Erreur de chargement de la liste\", error));\r\n    }, [id]);\r\n\r\n\r\n    const initializeWordStats = (words) => {\r\n        const stats = {};\r\n        words.forEach((word, index) => {\r\n            stats[index] = {\r\n                termCorrectCount: 0, // Compte les bonnes r√©ponses lorsque l'utilisateur doit trouver la d√©finition\r\n                definitionCorrectCount: 0, // Compte les bonnes r√©ponses lorsque l'utilisateur doit trouver le terme\r\n                usedRecently: false\r\n            };\r\n        });\r\n        setWordStats(stats);\r\n    };\r\n\r\n    const generateOptions = (word, words, mode) => {\r\n        console.log(\"üîÑ Appel de generateOptions avec :\", { word, mode });\r\n\r\n        if (!word || !words) {\r\n            console.warn(\"‚ùå Probl√®me : word ou words est undefined !\");\r\n            return;\r\n        }\r\n\r\n        let correctAnswer;\r\n        let incorrectAnswers;\r\n\r\n        if (mode === \"QCM_Term\") {\r\n            correctAnswer = word.definition;\r\n            incorrectAnswers = words\r\n                .map(w => w.definition)\r\n                .filter(def => def !== correctAnswer);\r\n        } else if (mode === \"QCM_Definition\") {\r\n            correctAnswer = word.term;\r\n            incorrectAnswers = words\r\n                .map(w => w.term)\r\n                .filter(term => term !== correctAnswer);\r\n        } else {\r\n            console.warn(\"‚ùå Mode inconnu :\", mode);\r\n            return;\r\n        }\r\n\r\n        if (incorrectAnswers.length < 3) {\r\n            console.warn(\"‚ö†Ô∏è Pas assez d'options incorrectes !\");\r\n        }\r\n\r\n        incorrectAnswers = incorrectAnswers\r\n            .sort(() => Math.random() - 0.5)\r\n            .slice(0, 3);\r\n\r\n        const allOptions = [correctAnswer, ...incorrectAnswers]\r\n            .sort(() => Math.random() - 0.5);\r\n\r\n        console.log(\"‚úÖ Options g√©n√©r√©es :\", allOptions);\r\n\r\n        setOptions(allOptions);\r\n        setSelectedAnswer(null);\r\n        setIsCorrect(null);\r\n    };\r\n\r\n\r\n    const selectNextWord = () => {\r\n        if (!list || !list.words || Object.keys(wordStats).length === 0) {\r\n            console.warn(\"‚ùå Impossible de s√©lectionner un mot !\");\r\n            return;\r\n        }\r\n\r\n        let availableWords = Object.keys(wordStats).filter(i => !wordStats[i].usedRecently);\r\n\r\n        if (availableWords.length === 0) {\r\n            Object.keys(wordStats).forEach(i => (wordStats[i].usedRecently = false));\r\n            availableWords = Object.keys(wordStats);\r\n        }\r\n\r\n        let nextIndex = availableWords[Math.floor(Math.random() * availableWords.length)];\r\n        wordStats[nextIndex].usedRecently = true;\r\n        setWordStats({ ...wordStats });\r\n        setCurrentWordIndex(parseInt(nextIndex));\r\n\r\n        const stats = wordStats[nextIndex];\r\n        let exerciseType = stats.termCorrectCount <= stats.definitionCorrectCount ? \"QCM_Term\" : \"QCM_Definition\";\r\n\r\n        if (stats.termCorrectCount >= 2 && stats.definitionCorrectCount >= 2) {\r\n            exerciseType = \"Input\";\r\n        }\r\n\r\n        setCurrentExerciseType(exerciseType);\r\n        generateOptions(list.words[nextIndex], list.words, exerciseType);\r\n    };\r\n\r\n    const handleQCMChoice = (selectedOption) => {\r\n        if (!list) return;\r\n\r\n        let correctAnswer = currentExerciseType === \"QCM_Term\" ?\r\n            list.words[currentWordIndex].definition :\r\n            list.words[currentWordIndex].term;\r\n\r\n        if (![\"QCM_Term\", \"QCM_Definition\"].includes(currentExerciseType)) {\r\n            console.error(\"üö® Probl√®me : type d'exercice inconnu !\", currentExerciseType);\r\n            return;\r\n        }\r\n\r\n        const isAnswerCorrect = selectedOption === correctAnswer;\r\n        setSelectedAnswer(selectedOption);\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        if (isAnswerCorrect) {\r\n            setWordStats(prevStats => ({\r\n                ...prevStats,\r\n                [currentWordIndex]: {\r\n                    ...prevStats[currentWordIndex],\r\n                    [currentExerciseType === \"QCM_Term\" ? \"termCorrectCount\" : \"definitionCorrectCount\"]: prevStats[currentWordIndex][currentExerciseType === \"QCM_Term\" ? \"termCorrectCount\" : \"definitionCorrectCount\"] + 1\r\n                }\r\n            }));\r\n        }\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n        }, 1000);\r\n    };\r\n\r\n    const handleInputSubmit = () => {\r\n        if (!userInput.trim()) return;\r\n\r\n        setHasSubmitted(true);\r\n\r\n        let correctAnswer;\r\n        let statsField;\r\n\r\n        if (currentExerciseType === \"Input\") {\r\n            correctAnswer = list.words[currentWordIndex].term;\r\n            statsField = \"termCorrectCount\";  // üî• ERREUR corrig√©e ici\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        const isAnswerCorrect = userInput.trim().toLowerCase() === correctAnswer.toLowerCase();\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        if (isAnswerCorrect) {\r\n            wordStats[currentWordIndex][statsField] += 1;\r\n            setWordStats({ ...wordStats });\r\n        }\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n            setUserInput(\"\");\r\n            setIsCorrect(null);\r\n            setHasSubmitted(false);\r\n        }, 1000);\r\n    };\r\n\r\n\r\n    if (!list) return <p>Chargement...</p>;\r\n\r\n    return (\r\n        <div className=\"learn-container\">\r\n            <button className=\"exit-button\" onClick={() => navigate(`/list/${id}`)}>\r\n                <i className=\"bi bi-x-lg\"></i>\r\n            </button>\r\n\r\n            <ProgressBar now={progress} label={`${Math.round(progress)}% completed`} />\r\n\r\n            <h2 className=\"term\">{list.words[currentWordIndex].term}</h2>\r\n\r\n            {currentExerciseType === \"QCM\" ? (\r\n                <div className=\"options-container\">\r\n                    {options.length > 0 ? (\r\n                        options.map((option, index) => (\r\n                            <button\r\n                                key={index}\r\n                                className={`option-button ${selectedAnswer === option ? (isCorrect ? \"correct\" : \"incorrect\") : \"\"}`}\r\n                                onClick={() => handleQCMChoice(option)}\r\n                                disabled={selectedAnswer !== null}\r\n                            >\r\n                                {option}\r\n                                {selectedAnswer === option && (\r\n                                    <i className={`bi ${isCorrect ? \"bi-check-lg\" : \"bi-x\"}`} />\r\n                                )}\r\n                            </button>\r\n                        ))\r\n                    ) : (\r\n                        <p>Chargement des options...</p>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <div className=\"input-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={userInput}\r\n                        onChange={(e) => setUserInput(e.target.value)}\r\n                        placeholder=\"Write the answer\"\r\n                    />\r\n                    <button onClick={handleInputSubmit}>\r\n                        <i className=\"bi bi-arrow-up-circle-fill\"></i>\r\n                    </button>\r\n                    {hasSubmitted && (\r\n                        <p className={isCorrect ? \"correct-text\" : \"incorrect-text\"}>\r\n                            {isCorrect ? \"Correct !\" : `False, the good answer is : ${list.words[currentWordIndex].definition}`}\r\n                        </p>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Learn;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}