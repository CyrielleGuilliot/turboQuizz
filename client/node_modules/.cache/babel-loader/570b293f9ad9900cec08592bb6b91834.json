{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cyrie\\\\Documents\\\\Projets\\\\turboquizz\\\\client\\\\src\\\\pages\\\\Learn.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport \"./css/Learn.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Learn = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [list, setList] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [wordStats, setWordStats] = useState({});\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentExerciseType, setCurrentExerciseType] = useState(\"QCM\");\n  const [options, setOptions] = useState([]);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [userInput, setUserInput] = useState(\"\");\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n  const [sessionComplete, setSessionComplete] = useState(false);\n  const isWordMastered = stats => {\n    return stats.qcmCorrect >= 2 && stats.inputCorrect >= 2;\n  };\n  useEffect(() => {\n    const userId = localStorage.getItem(\"userId\");\n    fetch(`http://localhost:5000/api/users/${userId}/lists`).then(response => response.json()).then(data => {\n      const selectedList = data.find(l => l.id === parseInt(id));\n      if (selectedList && selectedList.words.length > 0) {\n        setList(selectedList);\n        initializeWordStats(selectedList.words);\n        generateOptions(selectedList.words[0], selectedList.words);\n      } else {\n        console.error(\"Liste non trouvée ou vide.\");\n      }\n    }).catch(error => console.error(\"Erreur de chargement de la liste\", error));\n  }, [id]);\n  const initializeWordStats = words => {\n    const stats = {};\n    words.forEach((word, index) => {\n      stats[index] = {\n        qcmCorrect: 0,\n        inputCorrect: 0,\n        usedRecently: false\n      };\n    });\n    setWordStats(stats);\n  };\n  const generateOptions = (word, words) => {\n    if (!word || !words) return;\n    const correctDefinition = word.definition;\n    let incorrectDefs = words.map(w => w.definition).filter(def => def !== correctDefinition);\n    incorrectDefs = incorrectDefs.sort(() => 0.5 - Math.random()).slice(0, 3);\n    const allOptions = [correctDefinition, ...incorrectDefs].sort(() => 0.5 - Math.random());\n    setOptions(allOptions);\n    setSelectedAnswer(null);\n    setIsCorrect(null);\n  };\n  const selectNextWord = () => {\n    if (!list || !list.words || Object.keys(wordStats).length === 0) return;\n    const notMasteredIndexes = Object.entries(wordStats).filter(([_, stats]) => !isWordMastered(stats)).map(([index]) => index);\n    if (notMasteredIndexes.length === 0) {\n      setList(null);\n      setSessionComplete(true);\n      return;\n    }\n    let availableWords = notMasteredIndexes.filter(i => !wordStats[i].usedRecently);\n    if (availableWords.length === 0) {\n      notMasteredIndexes.forEach(i => wordStats[i].usedRecently = false);\n      availableWords = notMasteredIndexes;\n    }\n    const nextIndex = availableWords[Math.floor(Math.random() * availableWords.length)];\n    wordStats[nextIndex].usedRecently = true;\n    setWordStats({\n      ...wordStats\n    });\n    setCurrentWordIndex(parseInt(nextIndex));\n    const nextStats = wordStats[nextIndex];\n    if (nextStats.qcmCorrect >= 2) {\n      setCurrentExerciseType(\"Input\");\n    } else {\n      setCurrentExerciseType(\"QCM\");\n      generateOptions(list.words[nextIndex], list.words);\n    }\n  };\n  const handleQCMChoice = selectedDef => {\n    if (!list) return;\n    const correctDef = list.words[currentWordIndex].definition;\n    const isAnswerCorrect = selectedDef === correctDef;\n    setSelectedAnswer(selectedDef);\n    setIsCorrect(isAnswerCorrect);\n    const updatedStats = {\n      ...wordStats\n    };\n    const currentStats = updatedStats[currentWordIndex];\n    if (isAnswerCorrect) {\n      currentStats.qcmCorrect += 1;\n\n      // Vérifie si le mot est maîtrisé\n      if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\n        currentStats.mastered = true;\n      }\n    }\n    setWordStats(updatedStats);\n    updateProgress(updatedStats);\n    setTimeout(() => {\n      selectNextWord();\n    }, 1000);\n  };\n  const handleInputSubmit = () => {\n    if (!userInput.trim()) return;\n    setHasSubmitted(true);\n    const correctDef = list.words[currentWordIndex].definition;\n    const isAnswerCorrect = userInput.trim().toLowerCase() === correctDef.toLowerCase();\n    setIsCorrect(isAnswerCorrect);\n    const updatedStats = {\n      ...wordStats\n    };\n    const currentStats = updatedStats[currentWordIndex];\n    if (isAnswerCorrect) {\n      currentStats.inputCorrect += 1;\n      if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\n        currentStats.mastered = true;\n      }\n    }\n    setWordStats(updatedStats);\n    updateProgress(updatedStats);\n    setTimeout(() => {\n      selectNextWord();\n      setUserInput(\"\");\n      setIsCorrect(null);\n      setHasSubmitted(false);\n    }, 1000);\n  };\n  const updateProgress = updatedStats => {\n    if (!list) return;\n    const totalWords = list.words.length;\n    const masteredWords = Object.values(updatedStats).filter(stat => stat.qcmCorrect >= 2 && stat.inputCorrect >= 2).length;\n    console.log(\"Progress:\", masteredWords, \"/\", totalWords); // Ajoute ceci pour voir\n\n    const newProgress = masteredWords / totalWords * 100;\n    setProgress(newProgress);\n  };\n  if (!list && !sessionComplete) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 16\n    }, this);\n  }\n  if (sessionComplete) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"learn-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDF89 F\\xE9licitations !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tu as ma\\xEEtris\\xE9 tous les mots de cette liste.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const userId = localStorage.getItem(\"userId\");\n          navigate(`/user/${userId}/list/${id}`);\n        },\n        children: \"Retour \\xE0 la liste\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"learn-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"exit-button\",\n      onClick: () => {\n        const userId = localStorage.getItem(\"userId\");\n        navigate(`/user/${userId}/list/${id}`);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-x-lg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"term\",\n      children: list.words[currentWordIndex].term\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this), currentExerciseType === \"QCM\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-container\",\n      children: options.length > 0 ? options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `option-button ${selectedAnswer ? option === list.words[currentWordIndex].definition ? \"correct\" : option === selectedAnswer ? \"incorrect\" : \"\" : \"\"}`,\n        onClick: () => handleQCMChoice(option),\n        disabled: selectedAnswer !== null,\n        children: [option, selectedAnswer === option && /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `bi ${isCorrect ? \"bi-check-lg\" : \"bi-x\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 41\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 33\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Chargement des options...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        placeholder: \"\\xC9crivez la d\\xE9finition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleInputSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bi bi-arrow-up-circle-fill\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 25\n      }, this), hasSubmitted && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: isCorrect ? \"correct-text\" : \"incorrect-text\",\n        children: isCorrect ? \"Correct !\" : `Faux, la bonne réponse était : ${list.words[currentWordIndex].definition}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 9\n  }, this);\n};\n_s(Learn, \"H/oCifkKnuLsA/wtpy8SA7JfiVY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Learn;\nexport default Learn;\nvar _c;\n$RefreshReg$(_c, \"Learn\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","ProgressBar","jsxDEV","_jsxDEV","Learn","_s","id","navigate","list","setList","progress","setProgress","wordStats","setWordStats","currentWordIndex","setCurrentWordIndex","currentExerciseType","setCurrentExerciseType","options","setOptions","selectedAnswer","setSelectedAnswer","isCorrect","setIsCorrect","userInput","setUserInput","hasSubmitted","setHasSubmitted","sessionComplete","setSessionComplete","isWordMastered","stats","qcmCorrect","inputCorrect","userId","localStorage","getItem","fetch","then","response","json","data","selectedList","find","l","parseInt","words","length","initializeWordStats","generateOptions","console","error","catch","forEach","word","index","usedRecently","correctDefinition","definition","incorrectDefs","map","w","filter","def","sort","Math","random","slice","allOptions","selectNextWord","Object","keys","notMasteredIndexes","entries","_","availableWords","i","nextIndex","floor","nextStats","handleQCMChoice","selectedDef","correctDef","isAnswerCorrect","updatedStats","currentStats","mastered","updateProgress","setTimeout","handleInputSubmit","trim","toLowerCase","totalWords","masteredWords","values","stat","log","newProgress","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","term","option","disabled","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/cyrie/Documents/Projets/turboquizz/client/src/pages/Learn.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {useParams, useNavigate} from \"react-router-dom\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport \"./css/Learn.css\";\r\n\r\nconst Learn = () => {\r\n    const {id} = useParams();\r\n    const navigate = useNavigate();\r\n    const [list, setList] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [wordStats, setWordStats] = useState({});\r\n    const [currentWordIndex, setCurrentWordIndex] = useState(0);\r\n    const [currentExerciseType, setCurrentExerciseType] = useState(\"QCM\");\r\n    const [options, setOptions] = useState([]);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [isCorrect, setIsCorrect] = useState(null);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [hasSubmitted, setHasSubmitted] = useState(false);\r\n    const [sessionComplete, setSessionComplete] = useState(false);\r\n    const isWordMastered = (stats) => {\r\n        return stats.qcmCorrect >= 2 && stats.inputCorrect >= 2;\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const userId = localStorage.getItem(\"userId\");\r\n\r\n        fetch(`http://localhost:5000/api/users/${userId}/lists`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const selectedList = data.find(l => l.id === parseInt(id));\r\n                if (selectedList && selectedList.words.length > 0) {\r\n                    setList(selectedList);\r\n                    initializeWordStats(selectedList.words);\r\n                    generateOptions(selectedList.words[0], selectedList.words);\r\n                } else {\r\n                    console.error(\"Liste non trouvée ou vide.\");\r\n                }\r\n            })\r\n            .catch(error => console.error(\"Erreur de chargement de la liste\", error));\r\n    }, [id]);\r\n\r\n    const initializeWordStats = (words) => {\r\n        const stats = {};\r\n        words.forEach((word, index) => {\r\n            stats[index] = {\r\n                qcmCorrect: 0,\r\n                inputCorrect: 0,\r\n                usedRecently: false,\r\n            };\r\n        });\r\n        setWordStats(stats);\r\n    };\r\n\r\n\r\n    const generateOptions = (word, words) => {\r\n        if (!word || !words) return;\r\n\r\n        const correctDefinition = word.definition;\r\n        let incorrectDefs = words\r\n            .map(w => w.definition)\r\n            .filter(def => def !== correctDefinition);\r\n\r\n        incorrectDefs = incorrectDefs.sort(() => 0.5 - Math.random()).slice(0, 3);\r\n        const allOptions = [correctDefinition, ...incorrectDefs].sort(() => 0.5 - Math.random());\r\n\r\n        setOptions(allOptions);\r\n        setSelectedAnswer(null);\r\n        setIsCorrect(null);\r\n    };\r\n\r\n    const selectNextWord = () => {\r\n        if (!list || !list.words || Object.keys(wordStats).length === 0) return;\r\n\r\n        const notMasteredIndexes = Object.entries(wordStats)\r\n            .filter(([_, stats]) => !isWordMastered(stats))\r\n            .map(([index]) => index);\r\n\r\n        if (notMasteredIndexes.length === 0) {\r\n            setList(null);\r\n            setSessionComplete(true);\r\n            return;\r\n        }\r\n\r\n        let availableWords = notMasteredIndexes.filter(i => !wordStats[i].usedRecently);\r\n\r\n        if (availableWords.length === 0) {\r\n            notMasteredIndexes.forEach(i => wordStats[i].usedRecently = false);\r\n            availableWords = notMasteredIndexes;\r\n        }\r\n\r\n        const nextIndex = availableWords[Math.floor(Math.random() * availableWords.length)];\r\n\r\n        wordStats[nextIndex].usedRecently = true;\r\n        setWordStats({...wordStats});\r\n        setCurrentWordIndex(parseInt(nextIndex));\r\n\r\n        const nextStats = wordStats[nextIndex];\r\n        if (nextStats.qcmCorrect >= 2) {\r\n            setCurrentExerciseType(\"Input\");\r\n        } else {\r\n            setCurrentExerciseType(\"QCM\");\r\n            generateOptions(list.words[nextIndex], list.words);\r\n        }\r\n    };\r\n\r\n\r\n    const handleQCMChoice = (selectedDef) => {\r\n        if (!list) return;\r\n\r\n        const correctDef = list.words[currentWordIndex].definition;\r\n        const isAnswerCorrect = selectedDef === correctDef;\r\n\r\n        setSelectedAnswer(selectedDef);\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        const updatedStats = {...wordStats};\r\n        const currentStats = updatedStats[currentWordIndex];\r\n\r\n        if (isAnswerCorrect) {\r\n            currentStats.qcmCorrect += 1;\r\n\r\n            // Vérifie si le mot est maîtrisé\r\n            if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\r\n                currentStats.mastered = true;\r\n            }\r\n        }\r\n\r\n        setWordStats(updatedStats);\r\n        updateProgress(updatedStats);\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n        }, 1000);\r\n    };\r\n\r\n    const handleInputSubmit = () => {\r\n        if (!userInput.trim()) return;\r\n\r\n        setHasSubmitted(true);\r\n\r\n        const correctDef = list.words[currentWordIndex].definition;\r\n        const isAnswerCorrect = userInput.trim().toLowerCase() === correctDef.toLowerCase();\r\n\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        const updatedStats = {...wordStats};\r\n        const currentStats = updatedStats[currentWordIndex];\r\n\r\n        if (isAnswerCorrect) {\r\n            currentStats.inputCorrect += 1;\r\n\r\n            if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\r\n                currentStats.mastered = true;\r\n            }\r\n        }\r\n\r\n        setWordStats(updatedStats);\r\n        updateProgress(updatedStats);\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n            setUserInput(\"\");\r\n            setIsCorrect(null);\r\n            setHasSubmitted(false);\r\n        }, 1000);\r\n    };\r\n\r\n\r\n    const updateProgress = (updatedStats) => {\r\n        if (!list) return;\r\n\r\n        const totalWords = list.words.length;\r\n        const masteredWords = Object.values(updatedStats).filter(stat =>\r\n            stat.qcmCorrect >= 2 && stat.inputCorrect >= 2\r\n        ).length;\r\n\r\n        console.log(\"Progress:\", masteredWords, \"/\", totalWords); // Ajoute ceci pour voir\r\n\r\n        const newProgress = (masteredWords / totalWords) * 100;\r\n        setProgress(newProgress);\r\n    };\r\n\r\n    if (!list && !sessionComplete) {\r\n        return <p>Chargement...</p>;\r\n    }\r\n\r\n    if (sessionComplete) {\r\n        return (\r\n            <div className=\"learn-container\">\r\n                <h2>🎉 Félicitations !</h2>\r\n                <p>Tu as maîtrisé tous les mots de cette liste.</p>\r\n                <button onClick={() => {\r\n                    const userId = localStorage.getItem(\"userId\");\r\n                    navigate(`/user/${userId}/list/${id}`);}}>\r\n                    Retour à la liste\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"learn-container\">\r\n            <button\r\n                className=\"exit-button\"\r\n                onClick={() => {\r\n                    const userId = localStorage.getItem(\"userId\");\r\n                    navigate(`/user/${userId}/list/${id}`);\r\n                }}>\r\n                <i className=\"bi bi-x-lg\"></i>\r\n            </button>\r\n\r\n            <h2 className=\"term\">{list.words[currentWordIndex].term}</h2>\r\n            {currentExerciseType === \"QCM\" ? (\r\n                    <div className=\"options-container\">\r\n                        {options.length > 0 ? (\r\n                            options.map((option, index) => (\r\n                                <button\r\n                                    key={index}\r\n                                    className={`option-button ${\r\n                                        selectedAnswer\r\n                                            ? option === list.words[currentWordIndex].definition\r\n                                                ? \"correct\"\r\n                                                : option === selectedAnswer\r\n                                                    ? \"incorrect\"\r\n                                                    : \"\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() => handleQCMChoice(option)}\r\n                                    disabled={selectedAnswer !== null}\r\n                                >\r\n                                    {option}\r\n                                    {selectedAnswer === option && (\r\n                                        <i className={`bi ${isCorrect ? \"bi-check-lg\" : \"bi-x\"}`}/>\r\n                                    )}\r\n                                </button>\r\n                            ))\r\n                        ) : (\r\n                            <p>Chargement des options...</p>\r\n                        )}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={userInput}\r\n                            onChange={(e) => setUserInput(e.target.value)}\r\n                            placeholder=\"Écrivez la définition\"\r\n                        />\r\n                        <button onClick={handleInputSubmit}>\r\n                            <i className=\"bi bi-arrow-up-circle-fill\"></i>\r\n                        </button>\r\n                        {hasSubmitted && (\r\n                            <p className={isCorrect ? \"correct-text\" : \"incorrect-text\"}>\r\n                                {isCorrect\r\n                                    ? \"Correct !\"\r\n                                    : `Faux, la bonne réponse était : ${list.words[currentWordIndex].definition}`}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n        ;\r\n};\r\n\r\nexport default Learn;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}