{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cyrie\\\\Documents\\\\Projets\\\\turboquizz\\\\client\\\\src\\\\pages\\\\Learn.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport \"./css/Learn.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Learn = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [list, setList] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [wordStats, setWordStats] = useState({});\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentExerciseType, setCurrentExerciseType] = useState(\"QCM_Term\");\n  const [options, setOptions] = useState([]);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [userInput, setUserInput] = useState(\"\");\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n  useEffect(() => {\n    fetch(`http://localhost:5000/api/lists`).then(response => response.json()).then(data => {\n      const selectedList = data.find(l => l.id === parseInt(id));\n      if (selectedList && selectedList.words.length > 0) {\n        setList(selectedList);\n        initializeWordStats(selectedList.words);\n        selectNextWord();\n      } else {\n        console.error(\"Liste non trouvée ou vide.\");\n      }\n    }).catch(error => console.error(\"Erreur de chargement de la liste\", error));\n  }, [id]);\n  const initializeWordStats = words => {\n    const stats = {};\n    words.forEach((word, index) => {\n      stats[index] = {\n        termCorrectCount: 0,\n        definitionCorrectCount: 0,\n        usedRecently: false\n      };\n    });\n    setWordStats(stats);\n  };\n  const selectNextWord = () => {\n    if (!list || !list.words || Object.keys(wordStats).length === 0) {\n      console.warn(\"❌ Impossible de sélectionner un mot !\");\n      return;\n    }\n    let availableWords = Object.keys(wordStats).filter(i => !wordStats[i].usedRecently);\n    if (availableWords.length === 0) {\n      Object.keys(wordStats).forEach(i => wordStats[i].usedRecently = false);\n      availableWords = Object.keys(wordStats);\n    }\n    let nextIndex = availableWords[Math.floor(Math.random() * availableWords.length)];\n    wordStats[nextIndex].usedRecently = true;\n    setWordStats({\n      ...wordStats\n    });\n    setCurrentWordIndex(parseInt(nextIndex));\n    const stats = wordStats[nextIndex];\n    let exerciseType;\n    if (stats.termCorrectCount < 2 && stats.definitionCorrectCount < 2) {\n      exerciseType = Math.random() < 0.5 ? \"QCM_Term\" : \"QCM_Definition\";\n    } else if (stats.termCorrectCount < 2) {\n      exerciseType = \"QCM_Term\";\n    } else if (stats.definitionCorrectCount < 2) {\n      exerciseType = \"QCM_Definition\";\n    } else {\n      exerciseType = \"Input\";\n    }\n    setCurrentExerciseType(exerciseType);\n    if (exerciseType.startsWith(\"QCM\")) {\n      generateOptions(list.words[nextIndex], list.words, exerciseType);\n    }\n  };\n  const generateOptions = (word, words, mode) => {\n    if (!word || !words) return;\n    let correctAnswer;\n    let incorrectAnswers;\n    if (mode === \"QCM_Term\") {\n      correctAnswer = word.definition;\n      incorrectAnswers = words.map(w => w.definition).filter(def => def !== correctAnswer);\n    } else if (mode === \"QCM_Definition\") {\n      correctAnswer = word.term;\n      incorrectAnswers = words.map(w => w.term).filter(term => term !== correctAnswer);\n    } else {\n      return;\n    }\n    incorrectAnswers = incorrectAnswers.sort(() => Math.random() - 0.5).slice(0, 3);\n    const allOptions = [correctAnswer, ...incorrectAnswers].sort(() => Math.random() - 0.5);\n    setOptions(allOptions);\n    setSelectedAnswer(null);\n    setIsCorrect(null);\n  };\n  const handleQCMChoice = selectedOption => {\n    if (!list) return;\n    let correctAnswer = currentExerciseType === \"QCM_Term\" ? list.words[currentWordIndex].definition : list.words[currentWordIndex].term;\n    const isAnswerCorrect = selectedOption === correctAnswer;\n    setSelectedAnswer(selectedOption);\n    setIsCorrect(isAnswerCorrect);\n    if (isAnswerCorrect) {\n      setWordStats(prevStats => ({\n        ...prevStats,\n        [currentWordIndex]: {\n          ...prevStats[currentWordIndex],\n          [currentExerciseType === \"QCM_Term\" ? \"termCorrectCount\" : \"definitionCorrectCount\"]: prevStats[currentWordIndex][currentExerciseType === \"QCM_Term\" ? \"termCorrectCount\" : \"definitionCorrectCount\"] + 1\n        }\n      }));\n    }\n    setTimeout(selectNextWord, 1000);\n  };\n  const handleInputSubmit = () => {\n    if (!userInput.trim()) return;\n    setHasSubmitted(true);\n    let correctAnswer = list.words[currentWordIndex].term;\n    const isAnswerCorrect = userInput.trim().toLowerCase() === correctAnswer.toLowerCase();\n    setIsCorrect(isAnswerCorrect);\n    if (isAnswerCorrect) {\n      wordStats[currentWordIndex].termCorrectCount += 1;\n      setWordStats({\n        ...wordStats\n      });\n    }\n    setTimeout(() => {\n      selectNextWord();\n      setUserInput(\"\");\n      setIsCorrect(null);\n      setHasSubmitted(false);\n    }, 1000);\n  };\n  if (!list) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Chargement...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"learn-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"exit-button\",\n      onClick: () => navigate(`/list/${id}`),\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-x-lg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      now: progress,\n      label: `${Math.round(progress)}% completed`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"term\",\n      children: list.words[currentWordIndex].term\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), currentExerciseType.startsWith(\"QCM\") ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-container\",\n      children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleQCMChoice(option),\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleInputSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n};\n_s(Learn, \"YoWZTus30HpwToU77Wr22GzciUA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Learn;\nexport default Learn;\nvar _c;\n$RefreshReg$(_c, \"Learn\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","ProgressBar","jsxDEV","_jsxDEV","Learn","_s","id","navigate","list","setList","progress","setProgress","wordStats","setWordStats","currentWordIndex","setCurrentWordIndex","currentExerciseType","setCurrentExerciseType","options","setOptions","selectedAnswer","setSelectedAnswer","isCorrect","setIsCorrect","userInput","setUserInput","hasSubmitted","setHasSubmitted","fetch","then","response","json","data","selectedList","find","l","parseInt","words","length","initializeWordStats","selectNextWord","console","error","catch","stats","forEach","word","index","termCorrectCount","definitionCorrectCount","usedRecently","Object","keys","warn","availableWords","filter","i","nextIndex","Math","floor","random","exerciseType","startsWith","generateOptions","mode","correctAnswer","incorrectAnswers","definition","map","w","def","term","sort","slice","allOptions","handleQCMChoice","selectedOption","isAnswerCorrect","prevStats","setTimeout","handleInputSubmit","trim","toLowerCase","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","now","label","round","option","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/cyrie/Documents/Projets/turboquizz/client/src/pages/Learn.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport \"./css/Learn.css\";\r\n\r\nconst Learn = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const [list, setList] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [wordStats, setWordStats] = useState({});\r\n    const [currentWordIndex, setCurrentWordIndex] = useState(0);\r\n    const [currentExerciseType, setCurrentExerciseType] = useState(\"QCM_Term\");\r\n    const [options, setOptions] = useState([]);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [isCorrect, setIsCorrect] = useState(null);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [hasSubmitted, setHasSubmitted] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:5000/api/lists`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const selectedList = data.find(l => l.id === parseInt(id));\r\n                if (selectedList && selectedList.words.length > 0) {\r\n                    setList(selectedList);\r\n                    initializeWordStats(selectedList.words);\r\n                    selectNextWord();\r\n                } else {\r\n                    console.error(\"Liste non trouvée ou vide.\");\r\n                }\r\n            })\r\n            .catch(error => console.error(\"Erreur de chargement de la liste\", error));\r\n    }, [id]);\r\n\r\n    const initializeWordStats = (words) => {\r\n        const stats = {};\r\n        words.forEach((word, index) => {\r\n            stats[index] = {\r\n                termCorrectCount: 0,\r\n                definitionCorrectCount: 0,\r\n                usedRecently: false\r\n            };\r\n        });\r\n        setWordStats(stats);\r\n    };\r\n\r\n    const selectNextWord = () => {\r\n        if (!list || !list.words || Object.keys(wordStats).length === 0) {\r\n            console.warn(\"❌ Impossible de sélectionner un mot !\");\r\n            return;\r\n        }\r\n\r\n        let availableWords = Object.keys(wordStats).filter(i => !wordStats[i].usedRecently);\r\n\r\n        if (availableWords.length === 0) {\r\n            Object.keys(wordStats).forEach(i => (wordStats[i].usedRecently = false));\r\n            availableWords = Object.keys(wordStats);\r\n        }\r\n\r\n        let nextIndex = availableWords[Math.floor(Math.random() * availableWords.length)];\r\n        wordStats[nextIndex].usedRecently = true;\r\n        setWordStats({ ...wordStats });\r\n        setCurrentWordIndex(parseInt(nextIndex));\r\n\r\n        const stats = wordStats[nextIndex];\r\n        let exerciseType;\r\n\r\n        if (stats.termCorrectCount < 2 && stats.definitionCorrectCount < 2) {\r\n            exerciseType = Math.random() < 0.5 ? \"QCM_Term\" : \"QCM_Definition\";\r\n        } else if (stats.termCorrectCount < 2) {\r\n            exerciseType = \"QCM_Term\";\r\n        } else if (stats.definitionCorrectCount < 2) {\r\n            exerciseType = \"QCM_Definition\";\r\n        } else {\r\n            exerciseType = \"Input\";\r\n        }\r\n\r\n        setCurrentExerciseType(exerciseType);\r\n        if (exerciseType.startsWith(\"QCM\")) {\r\n            generateOptions(list.words[nextIndex], list.words, exerciseType);\r\n        }\r\n    };\r\n\r\n    const generateOptions = (word, words, mode) => {\r\n        if (!word || !words) return;\r\n\r\n        let correctAnswer;\r\n        let incorrectAnswers;\r\n\r\n        if (mode === \"QCM_Term\") {\r\n            correctAnswer = word.definition;\r\n            incorrectAnswers = words.map(w => w.definition).filter(def => def !== correctAnswer);\r\n        } else if (mode === \"QCM_Definition\") {\r\n            correctAnswer = word.term;\r\n            incorrectAnswers = words.map(w => w.term).filter(term => term !== correctAnswer);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        incorrectAnswers = incorrectAnswers.sort(() => Math.random() - 0.5).slice(0, 3);\r\n        const allOptions = [correctAnswer, ...incorrectAnswers].sort(() => Math.random() - 0.5);\r\n\r\n        setOptions(allOptions);\r\n        setSelectedAnswer(null);\r\n        setIsCorrect(null);\r\n    };\r\n\r\n    const handleQCMChoice = (selectedOption) => {\r\n        if (!list) return;\r\n\r\n        let correctAnswer = currentExerciseType === \"QCM_Term\" ?\r\n            list.words[currentWordIndex].definition :\r\n            list.words[currentWordIndex].term;\r\n\r\n        const isAnswerCorrect = selectedOption === correctAnswer;\r\n        setSelectedAnswer(selectedOption);\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        if (isAnswerCorrect) {\r\n            setWordStats(prevStats => ({\r\n                ...prevStats,\r\n                [currentWordIndex]: {\r\n                    ...prevStats[currentWordIndex],\r\n                    [currentExerciseType === \"QCM_Term\" ? \"termCorrectCount\" : \"definitionCorrectCount\"]: prevStats[currentWordIndex][currentExerciseType === \"QCM_Term\" ? \"termCorrectCount\" : \"definitionCorrectCount\"] + 1\r\n                }\r\n            }));\r\n        }\r\n\r\n        setTimeout(selectNextWord, 1000);\r\n    };\r\n\r\n    const handleInputSubmit = () => {\r\n        if (!userInput.trim()) return;\r\n\r\n        setHasSubmitted(true);\r\n        let correctAnswer = list.words[currentWordIndex].term;\r\n        const isAnswerCorrect = userInput.trim().toLowerCase() === correctAnswer.toLowerCase();\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        if (isAnswerCorrect) {\r\n            wordStats[currentWordIndex].termCorrectCount += 1;\r\n            setWordStats({ ...wordStats });\r\n        }\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n            setUserInput(\"\");\r\n            setIsCorrect(null);\r\n            setHasSubmitted(false);\r\n        }, 1000);\r\n    };\r\n\r\n    if (!list) return <p>Chargement...</p>;\r\n\r\n    return (\r\n        <div className=\"learn-container\">\r\n            <button className=\"exit-button\" onClick={() => navigate(`/list/${id}`)}>\r\n                <i className=\"bi bi-x-lg\"></i>\r\n            </button>\r\n\r\n            <ProgressBar now={progress} label={`${Math.round(progress)}% completed`} />\r\n            <h2 className=\"term\">{list.words[currentWordIndex].term}</h2>\r\n\r\n            {currentExerciseType.startsWith(\"QCM\") ? (\r\n                <div className=\"options-container\">\r\n                    {options.map((option, index) => (\r\n                        <button key={index} onClick={() => handleQCMChoice(option)}>\r\n                            {option}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <div className=\"input-container\">\r\n                    <input type=\"text\" value={userInput} onChange={(e) => setUserInput(e.target.value)} />\r\n                    <button onClick={handleInputSubmit}>Submit</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Learn;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}