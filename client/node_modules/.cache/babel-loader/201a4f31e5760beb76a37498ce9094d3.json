{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{useParams,useNavigate}from\"react-router-dom\";import\"./css/Learn.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Learn=()=>{const{id}=useParams();const navigate=useNavigate();const[list,setList]=useState(null);const[progress,setProgress]=useState(0);const[wordStats,setWordStats]=useState({});const[currentWordIndex,setCurrentWordIndex]=useState(0);const[currentExerciseType,setCurrentExerciseType]=useState(\"QCM\");const[options,setOptions]=useState([]);const[selectedAnswer,setSelectedAnswer]=useState(null);const[isCorrect,setIsCorrect]=useState(null);const[userInput,setUserInput]=useState(\"\");const[hasSubmitted,setHasSubmitted]=useState(false);const[sessionComplete,setSessionComplete]=useState(false);const isWordMastered=stats=>{return stats.qcmCorrect>=2&&stats.inputCorrect>=2;};useEffect(()=>{const userId=localStorage.getItem(\"userId\");fetch(`https://turboquizz.onrender.com/api/users/${userId}/lists`).then(response=>response.json()).then(data=>{const selectedList=data.find(l=>l.id===parseInt(id));if(selectedList&&selectedList.words.length>0){setList(selectedList);initializeWordStats(selectedList.words);generateOptions(selectedList.words[0],selectedList.words);}else{console.error(\"Liste non trouvée ou vide.\");}}).catch(error=>console.error(\"Erreur de chargement de la liste\",error));},[id]);const initializeWordStats=words=>{const stats={};words.forEach((word,index)=>{stats[index]={qcmCorrect:0,inputCorrect:0,usedRecently:false};});setWordStats(stats);};const generateOptions=(word,words)=>{if(!word||!words)return;const correctDefinition=word.definition;let incorrectDefs=words.map(w=>w.definition).filter(def=>def!==correctDefinition);incorrectDefs=incorrectDefs.sort(()=>0.5-Math.random()).slice(0,3);const allOptions=[correctDefinition,...incorrectDefs].sort(()=>0.5-Math.random());setOptions(allOptions);setSelectedAnswer(null);setIsCorrect(null);};const selectNextWord=()=>{if(!list||!list.words||Object.keys(wordStats).length===0)return;const notMasteredIndexes=Object.entries(wordStats).filter(_ref=>{let[_,stats]=_ref;return!isWordMastered(stats);}).map(_ref2=>{let[index]=_ref2;return index;});if(notMasteredIndexes.length===0){setList(null);setSessionComplete(true);return;}let availableWords=notMasteredIndexes.filter(i=>!wordStats[i].usedRecently);if(availableWords.length===0){notMasteredIndexes.forEach(i=>wordStats[i].usedRecently=false);availableWords=notMasteredIndexes;}const nextIndex=availableWords[Math.floor(Math.random()*availableWords.length)];wordStats[nextIndex].usedRecently=true;setWordStats({...wordStats});setCurrentWordIndex(parseInt(nextIndex));const nextStats=wordStats[nextIndex];if(nextStats.qcmCorrect>=2){setCurrentExerciseType(\"Input\");}else{setCurrentExerciseType(\"QCM\");generateOptions(list.words[nextIndex],list.words);}};const handleQCMChoice=selectedDef=>{if(!list)return;const correctDef=list.words[currentWordIndex].definition;const isAnswerCorrect=selectedDef===correctDef;setSelectedAnswer(selectedDef);setIsCorrect(isAnswerCorrect);const updatedStats={...wordStats};const currentStats=updatedStats[currentWordIndex];if(isAnswerCorrect){currentStats.qcmCorrect+=1;// Vérifie si le mot est maîtrisé\nif(currentStats.qcmCorrect>=2&&currentStats.inputCorrect>=2){currentStats.mastered=true;}}setWordStats(updatedStats);updateProgress(updatedStats);setTimeout(()=>{selectNextWord();},1000);};const handleInputSubmit=()=>{if(!userInput.trim())return;setHasSubmitted(true);const correctDef=list.words[currentWordIndex].definition;const isAnswerCorrect=userInput.trim().toLowerCase()===correctDef.toLowerCase();setIsCorrect(isAnswerCorrect);const updatedStats={...wordStats};const currentStats=updatedStats[currentWordIndex];if(isAnswerCorrect){currentStats.inputCorrect+=1;if(currentStats.qcmCorrect>=2&&currentStats.inputCorrect>=2){currentStats.mastered=true;}}setWordStats(updatedStats);updateProgress(updatedStats);setTimeout(()=>{selectNextWord();setUserInput(\"\");setIsCorrect(null);setHasSubmitted(false);},1000);};const updateProgress=updatedStats=>{if(!list)return;const totalWords=list.words.length;const masteredWords=Object.values(updatedStats).filter(stat=>stat.qcmCorrect>=2&&stat.inputCorrect>=2).length;console.log(\"Progress:\",masteredWords,\"/\",totalWords);// Ajoute ceci pour voir\nconst newProgress=masteredWords/totalWords*100;setProgress(newProgress);};if(!list&&!sessionComplete){return/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"});}if(sessionComplete){return/*#__PURE__*/_jsxs(\"div\",{className:\"learn-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83C\\uDF89 Congrats !\"}),/*#__PURE__*/_jsx(\"p\",{children:\"You've mastered all the words on this list.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{const userId=localStorage.getItem(\"userId\");navigate(`/user/${userId}/list/${id}`);},children:\"Back to the list\"})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"learn-container\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"exit-button\",onClick:()=>{const userId=localStorage.getItem(\"userId\");navigate(`/user/${userId}/list/${id}`);},children:/*#__PURE__*/_jsx(\"i\",{className:\"bi bi-x-lg\"})}),/*#__PURE__*/_jsx(\"h2\",{className:\"term\",children:list.words[currentWordIndex].term}),currentExerciseType===\"QCM\"?/*#__PURE__*/_jsx(\"div\",{className:\"options-container\",children:options.length>0?options.map((option,index)=>/*#__PURE__*/_jsxs(\"button\",{className:`option-button ${selectedAnswer?option===list.words[currentWordIndex].definition?\"correct\":option===selectedAnswer?\"incorrect\":\"\":\"\"}`,onClick:()=>handleQCMChoice(option),disabled:selectedAnswer!==null,children:[option,selectedAnswer===option&&/*#__PURE__*/_jsx(\"i\",{className:`bi ${isCorrect?\"bi-check-lg\":\"bi-x\"}`})]},index)):/*#__PURE__*/_jsx(\"p\",{children:\"Loading of options...\"})}):/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:userInput,onChange:e=>setUserInput(e.target.value),placeholder:\"\\xC9crivez la d\\xE9finition\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleInputSubmit,children:/*#__PURE__*/_jsx(\"i\",{className:\"bi bi-arrow-up-circle-fill\"})}),hasSubmitted&&/*#__PURE__*/_jsx(\"p\",{className:isCorrect?\"correct-text\":\"incorrect-text\",children:isCorrect?\"Correct !\":`Faux, la bonne réponse était : ${list.words[currentWordIndex].definition}`})]})]});};export default Learn;","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","jsx","_jsx","jsxs","_jsxs","Learn","id","navigate","list","setList","progress","setProgress","wordStats","setWordStats","currentWordIndex","setCurrentWordIndex","currentExerciseType","setCurrentExerciseType","options","setOptions","selectedAnswer","setSelectedAnswer","isCorrect","setIsCorrect","userInput","setUserInput","hasSubmitted","setHasSubmitted","sessionComplete","setSessionComplete","isWordMastered","stats","qcmCorrect","inputCorrect","userId","localStorage","getItem","fetch","then","response","json","data","selectedList","find","l","parseInt","words","length","initializeWordStats","generateOptions","console","error","catch","forEach","word","index","usedRecently","correctDefinition","definition","incorrectDefs","map","w","filter","def","sort","Math","random","slice","allOptions","selectNextWord","Object","keys","notMasteredIndexes","entries","_ref","_","_ref2","availableWords","i","nextIndex","floor","nextStats","handleQCMChoice","selectedDef","correctDef","isAnswerCorrect","updatedStats","currentStats","mastered","updateProgress","setTimeout","handleInputSubmit","trim","toLowerCase","totalWords","masteredWords","values","stat","log","newProgress","children","className","onClick","term","option","disabled","type","value","onChange","e","target","placeholder"],"sources":["C:/Users/cyrie/Documents/Projets/turboQuizz/client/src/pages/Learn.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {useParams, useNavigate} from \"react-router-dom\";\r\nimport \"./css/Learn.css\";\r\n\r\nconst Learn = () => {\r\n    const {id} = useParams();\r\n    const navigate = useNavigate();\r\n    const [list, setList] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [wordStats, setWordStats] = useState({});\r\n    const [currentWordIndex, setCurrentWordIndex] = useState(0);\r\n    const [currentExerciseType, setCurrentExerciseType] = useState(\"QCM\");\r\n    const [options, setOptions] = useState([]);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [isCorrect, setIsCorrect] = useState(null);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [hasSubmitted, setHasSubmitted] = useState(false);\r\n    const [sessionComplete, setSessionComplete] = useState(false);\r\n    const isWordMastered = (stats) => {\r\n        return stats.qcmCorrect >= 2 && stats.inputCorrect >= 2;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const userId = localStorage.getItem(\"userId\");\r\n\r\n        fetch(`https://turboquizz.onrender.com/api/users/${userId}/lists`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const selectedList = data.find(l => l.id === parseInt(id));\r\n                if (selectedList && selectedList.words.length > 0) {\r\n                    setList(selectedList);\r\n                    initializeWordStats(selectedList.words);\r\n                    generateOptions(selectedList.words[0], selectedList.words);\r\n                } else {\r\n                    console.error(\"Liste non trouvée ou vide.\");\r\n                }\r\n            })\r\n            .catch(error => console.error(\"Erreur de chargement de la liste\", error));\r\n    }, [id]);\r\n\r\n    const initializeWordStats = (words) => {\r\n        const stats = {};\r\n        words.forEach((word, index) => {\r\n            stats[index] = {\r\n                qcmCorrect: 0,\r\n                inputCorrect: 0,\r\n                usedRecently: false,\r\n            };\r\n        });\r\n        setWordStats(stats);\r\n    };\r\n\r\n    const generateOptions = (word, words) => {\r\n        if (!word || !words) return;\r\n\r\n        const correctDefinition = word.definition;\r\n        let incorrectDefs = words\r\n            .map(w => w.definition)\r\n            .filter(def => def !== correctDefinition);\r\n\r\n        incorrectDefs = incorrectDefs.sort(() => 0.5 - Math.random()).slice(0, 3);\r\n        const allOptions = [correctDefinition, ...incorrectDefs].sort(() => 0.5 - Math.random());\r\n\r\n        setOptions(allOptions);\r\n        setSelectedAnswer(null);\r\n        setIsCorrect(null);\r\n    };\r\n\r\n    const selectNextWord = () => {\r\n        if (!list || !list.words || Object.keys(wordStats).length === 0) return;\r\n\r\n        const notMasteredIndexes = Object.entries(wordStats)\r\n            .filter(([_, stats]) => !isWordMastered(stats))\r\n            .map(([index]) => index);\r\n\r\n        if (notMasteredIndexes.length === 0) {\r\n            setList(null);\r\n            setSessionComplete(true);\r\n            return;\r\n        }\r\n\r\n        let availableWords = notMasteredIndexes.filter(i => !wordStats[i].usedRecently);\r\n\r\n        if (availableWords.length === 0) {\r\n            notMasteredIndexes.forEach(i => wordStats[i].usedRecently = false);\r\n            availableWords = notMasteredIndexes;\r\n        }\r\n\r\n        const nextIndex = availableWords[Math.floor(Math.random() * availableWords.length)];\r\n\r\n        wordStats[nextIndex].usedRecently = true;\r\n        setWordStats({...wordStats});\r\n        setCurrentWordIndex(parseInt(nextIndex));\r\n\r\n        const nextStats = wordStats[nextIndex];\r\n        if (nextStats.qcmCorrect >= 2) {\r\n            setCurrentExerciseType(\"Input\");\r\n        } else {\r\n            setCurrentExerciseType(\"QCM\");\r\n            generateOptions(list.words[nextIndex], list.words);\r\n        }\r\n    };\r\n\r\n    const handleQCMChoice = (selectedDef) => {\r\n        if (!list) return;\r\n\r\n        const correctDef = list.words[currentWordIndex].definition;\r\n        const isAnswerCorrect = selectedDef === correctDef;\r\n\r\n        setSelectedAnswer(selectedDef);\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        const updatedStats = {...wordStats};\r\n        const currentStats = updatedStats[currentWordIndex];\r\n\r\n        if (isAnswerCorrect) {\r\n            currentStats.qcmCorrect += 1;\r\n\r\n            // Vérifie si le mot est maîtrisé\r\n            if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\r\n                currentStats.mastered = true;\r\n            }\r\n        }\r\n\r\n        setWordStats(updatedStats);\r\n        updateProgress(updatedStats);\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n        }, 1000);\r\n    };\r\n\r\n    const handleInputSubmit = () => {\r\n        if (!userInput.trim()) return;\r\n\r\n        setHasSubmitted(true);\r\n\r\n        const correctDef = list.words[currentWordIndex].definition;\r\n        const isAnswerCorrect = userInput.trim().toLowerCase() === correctDef.toLowerCase();\r\n\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        const updatedStats = {...wordStats};\r\n        const currentStats = updatedStats[currentWordIndex];\r\n\r\n        if (isAnswerCorrect) {\r\n            currentStats.inputCorrect += 1;\r\n\r\n            if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\r\n                currentStats.mastered = true;\r\n            }\r\n        }\r\n\r\n        setWordStats(updatedStats);\r\n        updateProgress(updatedStats);\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n            setUserInput(\"\");\r\n            setIsCorrect(null);\r\n            setHasSubmitted(false);\r\n        }, 1000);\r\n    };\r\n\r\n\r\n    const updateProgress = (updatedStats) => {\r\n        if (!list) return;\r\n\r\n        const totalWords = list.words.length;\r\n        const masteredWords = Object.values(updatedStats).filter(stat =>\r\n            stat.qcmCorrect >= 2 && stat.inputCorrect >= 2\r\n        ).length;\r\n\r\n        console.log(\"Progress:\", masteredWords, \"/\", totalWords); // Ajoute ceci pour voir\r\n\r\n        const newProgress = (masteredWords / totalWords) * 100;\r\n        setProgress(newProgress);\r\n    };\r\n\r\n    if (!list && !sessionComplete) {\r\n        return <p>Loading...</p>;\r\n    }\r\n\r\n    if (sessionComplete) {\r\n        return (\r\n            <div className=\"learn-container\">\r\n                <h2>🎉 Congrats !</h2>\r\n                <p>You've mastered all the words on this list.</p>\r\n                <button onClick={() => {\r\n                    const userId = localStorage.getItem(\"userId\");\r\n                    navigate(`/user/${userId}/list/${id}`);}}>\r\n                    Back to the list\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"learn-container\">\r\n            <button\r\n                className=\"exit-button\"\r\n                onClick={() => {\r\n                    const userId = localStorage.getItem(\"userId\");\r\n                    navigate(`/user/${userId}/list/${id}`);\r\n                }}>\r\n                <i className=\"bi bi-x-lg\"></i>\r\n            </button>\r\n\r\n            <h2 className=\"term\">{list.words[currentWordIndex].term}</h2>\r\n            {currentExerciseType === \"QCM\" ? (\r\n                    <div className=\"options-container\">\r\n                        {options.length > 0 ? (\r\n                            options.map((option, index) => (\r\n                                <button\r\n                                    key={index}\r\n                                    className={`option-button ${\r\n                                        selectedAnswer\r\n                                            ? option === list.words[currentWordIndex].definition\r\n                                                ? \"correct\"\r\n                                                : option === selectedAnswer\r\n                                                    ? \"incorrect\"\r\n                                                    : \"\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() => handleQCMChoice(option)}\r\n                                    disabled={selectedAnswer !== null}\r\n                                >\r\n                                    {option}\r\n                                    {selectedAnswer === option && (\r\n                                        <i className={`bi ${isCorrect ? \"bi-check-lg\" : \"bi-x\"}`}/>\r\n                                    )}\r\n                                </button>\r\n                            ))\r\n                        ) : (\r\n                            <p>Loading of options...</p>\r\n                        )}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={userInput}\r\n                            onChange={(e) => setUserInput(e.target.value)}\r\n                            placeholder=\"Écrivez la définition\"\r\n                        />\r\n                        <button onClick={handleInputSubmit}>\r\n                            <i className=\"bi bi-arrow-up-circle-fill\"></i>\r\n                        </button>\r\n                        {hasSubmitted && (\r\n                            <p className={isCorrect ? \"correct-text\" : \"incorrect-text\"}>\r\n                                {isCorrect\r\n                                    ? \"Correct !\"\r\n                                    : `Faux, la bonne réponse était : ${list.words[currentWordIndex].definition}`}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n        ;\r\n};\r\n\r\nexport default Learn;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}