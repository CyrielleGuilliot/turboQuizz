{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cyrie\\\\Documents\\\\Projets\\\\turboquizz\\\\client\\\\src\\\\pages\\\\Learn.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport \"./css/Learn.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Learn = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [list, setList] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [wordStats, setWordStats] = useState({});\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentExerciseType, setCurrentExerciseType] = useState(\"QCM\");\n  const [options, setOptions] = useState([]);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [userInput, setUserInput] = useState(\"\");\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n  useEffect(() => {\n    fetch(\"http://localhost:5000/api/lists\").then(response => response.json()).then(data => {\n      const selectedList = data.find(l => l.id === parseInt(id));\n      if (selectedList && selectedList.words.length > 0) {\n        setList(selectedList);\n        initializeWordStats(selectedList.words);\n        generateOptions(selectedList.words[0], selectedList.words);\n      } else {\n        console.error(\"Liste non trouvée ou vide.\");\n      }\n    }).catch(error => console.error(\"Erreur de chargement de la liste\", error));\n  }, [id]);\n  const initializeWordStats = words => {\n    const stats = {};\n    words.forEach((word, index) => {\n      stats[index] = {\n        qcmCorrect: 0,\n        inputCorrect: 0,\n        usedRecently: false,\n        mastered: false\n      };\n    });\n    setWordStats(stats);\n  };\n  const generateOptions = (word, words) => {\n    if (!word || !words) return;\n    const correctDefinition = word.definition;\n    let incorrectDefs = words.map(w => w.definition).filter(def => def !== correctDefinition);\n    incorrectDefs = incorrectDefs.sort(() => 0.5 - Math.random()).slice(0, 3);\n    const allOptions = [correctDefinition, ...incorrectDefs].sort(() => 0.5 - Math.random());\n    setOptions(allOptions);\n    setSelectedAnswer(null);\n    setIsCorrect(null);\n  };\n  const selectNextWord = () => {\n    if (!list || !list.words || Object.keys(wordStats).length === 0) return;\n\n    // Étape 1 : Vérifie si tous les mots sont maîtrisés\n    const remainingWords = Object.keys(wordStats).filter(i => !wordStats[i].mastered);\n    if (remainingWords.length === 0) {\n      setList(null); // ou utiliser un état 'sessionComplete' si tu veux un meilleur contrôle\n      return;\n    }\n\n    // Étape 2 : Filtrer les mots disponibles (non maîtrisés et pas utilisés récemment)\n    let availableWords = remainingWords.filter(i => !wordStats[i].usedRecently);\n\n    // Étape 3 : Si tous les mots restants ont déjà été utilisés récemment, on réinitialise le flag\n    if (availableWords.length === 0) {\n      remainingWords.forEach(i => {\n        wordStats[i].usedRecently = false;\n      });\n      availableWords = [...remainingWords];\n    }\n\n    // Étape 4 : Choisir un mot au hasard parmi ceux disponibles\n    const nextIndex = availableWords[Math.floor(Math.random() * availableWords.length)];\n    if (nextIndex === undefined) {\n      console.error(\"Aucun mot disponible pour l'exercice.\");\n      return;\n    }\n\n    // Étape 5 : Mettre à jour les états\n    wordStats[nextIndex].usedRecently = true;\n    setWordStats({\n      ...wordStats\n    });\n    setCurrentWordIndex(parseInt(nextIndex));\n    const nextWordStats = wordStats[nextIndex];\n\n    // Étape 6 : Choisir le type d'exercice\n    if (nextWordStats.qcmCorrect >= 2) {\n      setCurrentExerciseType(\"Input\");\n    } else {\n      setCurrentExerciseType(\"QCM\");\n      generateOptions(list.words[nextIndex], list.words);\n    }\n  };\n  const handleQCMChoice = selectedDef => {\n    if (!list) return;\n    const correctDef = list.words[currentWordIndex].definition;\n    const isAnswerCorrect = selectedDef === correctDef;\n    setSelectedAnswer(selectedDef);\n    setIsCorrect(isAnswerCorrect);\n    if (isAnswerCorrect) {\n      wordStats[currentWordIndex].qcmCorrect += 1;\n      const currentStats = wordStats[currentWordIndex];\n      if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\n        currentStats.mastered = true;\n      }\n      const updatedStats = {\n        ...wordStats\n      };\n      setWordStats(updatedStats);\n      updateProgress(updatedStats);\n    }\n    setTimeout(() => {\n      selectNextWord();\n    }, 1000);\n  };\n  const handleInputSubmit = () => {\n    if (!userInput.trim()) return;\n    setHasSubmitted(true);\n    const correctDef = list.words[currentWordIndex].definition;\n    const isAnswerCorrect = userInput.trim().toLowerCase() === correctDef.toLowerCase();\n    setIsCorrect(isAnswerCorrect);\n    if (isAnswerCorrect) {\n      wordStats[currentWordIndex].inputCorrect += 1;\n      const currentStats = wordStats[currentWordIndex];\n      if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\n        currentStats.mastered = true;\n      }\n      const updatedStats = {\n        ...wordStats\n      };\n      setWordStats(updatedStats);\n      updateProgress(updatedStats);\n    }\n    setTimeout(() => {\n      selectNextWord();\n      setUserInput(\"\");\n      setIsCorrect(null);\n      setHasSubmitted(false);\n    }, 1000);\n  };\n  const updateProgress = updatedStats => {\n    const totalWords = list.words.length;\n    const masteredWords = Object.values(updatedStats).filter(stat => stat.qcmCorrect >= 2 && stat.inputCorrect >= 2).length;\n    const newProgress = masteredWords / totalWords * 100;\n    setProgress(newProgress);\n  };\n  if (!list) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Chargement...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"learn-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"exit-button\",\n      onClick: () => navigate(`/list/${id}`),\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-x-lg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      now: progress,\n      label: `${Math.round(progress)}% completed`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"term\",\n      children: list.words[currentWordIndex].term\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), currentExerciseType === \"QCM\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-container\",\n      children: options.length > 0 ? options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `option-button ${selectedAnswer ? option === list.words[currentWordIndex].definition ? \"correct\" : option === selectedAnswer ? \"incorrect\" : \"\" : \"\"}`,\n        onClick: () => handleQCMChoice(option),\n        disabled: selectedAnswer !== null,\n        children: [option, selectedAnswer === option && /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `bi ${isCorrect ? \"bi-check-lg\" : \"bi-x\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 37\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 29\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Chargement des options...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        placeholder: \"\\xC9crivez la d\\xE9finition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleInputSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bi bi-arrow-up-circle-fill\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }, this), hasSubmitted && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: isCorrect ? \"correct-text\" : \"incorrect-text\",\n        children: isCorrect ? \"Correct !\" : `Faux, la bonne réponse était : ${list.words[currentWordIndex].definition}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 9\n  }, this);\n};\n_s(Learn, \"JOiA9ju+3Q8KpQp15D2e4i0MrgM=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Learn;\nexport default Learn;\nvar _c;\n$RefreshReg$(_c, \"Learn\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","ProgressBar","jsxDEV","_jsxDEV","Learn","_s","id","navigate","list","setList","progress","setProgress","wordStats","setWordStats","currentWordIndex","setCurrentWordIndex","currentExerciseType","setCurrentExerciseType","options","setOptions","selectedAnswer","setSelectedAnswer","isCorrect","setIsCorrect","userInput","setUserInput","hasSubmitted","setHasSubmitted","fetch","then","response","json","data","selectedList","find","l","parseInt","words","length","initializeWordStats","generateOptions","console","error","catch","stats","forEach","word","index","qcmCorrect","inputCorrect","usedRecently","mastered","correctDefinition","definition","incorrectDefs","map","w","filter","def","sort","Math","random","slice","allOptions","selectNextWord","Object","keys","remainingWords","i","availableWords","nextIndex","floor","undefined","nextWordStats","handleQCMChoice","selectedDef","correctDef","isAnswerCorrect","currentStats","updatedStats","updateProgress","setTimeout","handleInputSubmit","trim","toLowerCase","totalWords","masteredWords","values","stat","newProgress","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","now","label","round","term","option","disabled","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/cyrie/Documents/Projets/turboquizz/client/src/pages/Learn.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport \"./css/Learn.css\";\r\n\r\nconst Learn = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const [list, setList] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [wordStats, setWordStats] = useState({});\r\n    const [currentWordIndex, setCurrentWordIndex] = useState(0);\r\n    const [currentExerciseType, setCurrentExerciseType] = useState(\"QCM\");\r\n    const [options, setOptions] = useState([]);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [isCorrect, setIsCorrect] = useState(null);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [hasSubmitted, setHasSubmitted] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetch(\"http://localhost:5000/api/lists\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const selectedList = data.find(l => l.id === parseInt(id));\r\n                if (selectedList && selectedList.words.length > 0) {\r\n                    setList(selectedList);\r\n                    initializeWordStats(selectedList.words);\r\n                    generateOptions(selectedList.words[0], selectedList.words);\r\n                } else {\r\n                    console.error(\"Liste non trouvée ou vide.\");\r\n                }\r\n            })\r\n            .catch(error => console.error(\"Erreur de chargement de la liste\", error));\r\n    }, [id]);\r\n\r\n    const initializeWordStats = (words) => {\r\n        const stats = {};\r\n        words.forEach((word, index) => {\r\n            stats[index] = {\r\n                qcmCorrect: 0,\r\n                inputCorrect: 0,\r\n                usedRecently: false,\r\n                mastered: false\r\n            };\r\n        });\r\n        setWordStats(stats);\r\n    };\r\n\r\n\r\n\r\n    const generateOptions = (word, words) => {\r\n        if (!word || !words) return;\r\n\r\n        const correctDefinition = word.definition;\r\n        let incorrectDefs = words\r\n            .map(w => w.definition)\r\n            .filter(def => def !== correctDefinition);\r\n\r\n        incorrectDefs = incorrectDefs.sort(() => 0.5 - Math.random()).slice(0, 3);\r\n        const allOptions = [correctDefinition, ...incorrectDefs].sort(() => 0.5 - Math.random());\r\n\r\n        setOptions(allOptions);\r\n        setSelectedAnswer(null);\r\n        setIsCorrect(null);\r\n    };\r\n\r\n    const selectNextWord = () => {\r\n        if (!list || !list.words || Object.keys(wordStats).length === 0) return;\r\n\r\n        // Étape 1 : Vérifie si tous les mots sont maîtrisés\r\n        const remainingWords = Object.keys(wordStats).filter(i => !wordStats[i].mastered);\r\n        if (remainingWords.length === 0) {\r\n            setList(null); // ou utiliser un état 'sessionComplete' si tu veux un meilleur contrôle\r\n            return;\r\n        }\r\n\r\n        // Étape 2 : Filtrer les mots disponibles (non maîtrisés et pas utilisés récemment)\r\n        let availableWords = remainingWords.filter(i => !wordStats[i].usedRecently);\r\n\r\n        // Étape 3 : Si tous les mots restants ont déjà été utilisés récemment, on réinitialise le flag\r\n        if (availableWords.length === 0) {\r\n            remainingWords.forEach(i => {\r\n                wordStats[i].usedRecently = false;\r\n            });\r\n            availableWords = [...remainingWords];\r\n        }\r\n\r\n        // Étape 4 : Choisir un mot au hasard parmi ceux disponibles\r\n        const nextIndex = availableWords[Math.floor(Math.random() * availableWords.length)];\r\n\r\n        if (nextIndex === undefined) {\r\n            console.error(\"Aucun mot disponible pour l'exercice.\");\r\n            return;\r\n        }\r\n\r\n        // Étape 5 : Mettre à jour les états\r\n        wordStats[nextIndex].usedRecently = true;\r\n        setWordStats({ ...wordStats });\r\n        setCurrentWordIndex(parseInt(nextIndex));\r\n\r\n        const nextWordStats = wordStats[nextIndex];\r\n\r\n        // Étape 6 : Choisir le type d'exercice\r\n        if (nextWordStats.qcmCorrect >= 2) {\r\n            setCurrentExerciseType(\"Input\");\r\n        } else {\r\n            setCurrentExerciseType(\"QCM\");\r\n            generateOptions(list.words[nextIndex], list.words);\r\n        }\r\n    };\r\n\r\n\r\n    const handleQCMChoice = (selectedDef) => {\r\n        if (!list) return;\r\n\r\n        const correctDef = list.words[currentWordIndex].definition;\r\n        const isAnswerCorrect = selectedDef === correctDef;\r\n\r\n        setSelectedAnswer(selectedDef);\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        if (isAnswerCorrect) {\r\n            wordStats[currentWordIndex].qcmCorrect += 1;\r\n\r\n            const currentStats = wordStats[currentWordIndex];\r\n            if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\r\n                currentStats.mastered = true;\r\n            }\r\n\r\n            const updatedStats = { ...wordStats };\r\n            setWordStats(updatedStats);\r\n            updateProgress(updatedStats);\r\n        }\r\n\r\n\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n        }, 1000);\r\n    };\r\n\r\n    const handleInputSubmit = () => {\r\n        if (!userInput.trim()) return;\r\n\r\n        setHasSubmitted(true);\r\n\r\n        const correctDef = list.words[currentWordIndex].definition;\r\n        const isAnswerCorrect = userInput.trim().toLowerCase() === correctDef.toLowerCase();\r\n\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        if (isAnswerCorrect) {\r\n            wordStats[currentWordIndex].inputCorrect += 1;\r\n\r\n            const currentStats = wordStats[currentWordIndex];\r\n            if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\r\n                currentStats.mastered = true;\r\n            }\r\n\r\n            const updatedStats = { ...wordStats };\r\n            setWordStats(updatedStats);\r\n            updateProgress(updatedStats);\r\n        }\r\n\r\n\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n            setUserInput(\"\");\r\n            setIsCorrect(null);\r\n            setHasSubmitted(false);\r\n        }, 1000);\r\n    };\r\n\r\n    const updateProgress = (updatedStats) => {\r\n        const totalWords = list.words.length;\r\n        const masteredWords = Object.values(updatedStats).filter(stat =>\r\n            stat.qcmCorrect >= 2 && stat.inputCorrect >= 2\r\n        ).length;\r\n        const newProgress = (masteredWords / totalWords) * 100;\r\n        setProgress(newProgress);\r\n    };\r\n\r\n    if (!list) return <p>Chargement...</p>;\r\n\r\n    return (\r\n        <div className=\"learn-container\">\r\n            <button className=\"exit-button\" onClick={() => navigate(`/list/${id}`)}>\r\n                <i className=\"bi bi-x-lg\"></i>\r\n            </button>\r\n\r\n            <ProgressBar now={progress} label={`${Math.round(progress)}% completed`} />\r\n\r\n            <h2 className=\"term\">{list.words[currentWordIndex].term}</h2>\r\n\r\n            {currentExerciseType === \"QCM\" ? (\r\n                <div className=\"options-container\">\r\n                    {options.length > 0 ? (\r\n                        options.map((option, index) => (\r\n                            <button\r\n                                key={index}\r\n                                className={`option-button ${\r\n                                    selectedAnswer\r\n                                        ? option === list.words[currentWordIndex].definition\r\n                                            ? \"correct\"\r\n                                            : option === selectedAnswer\r\n                                                ? \"incorrect\"\r\n                                                : \"\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => handleQCMChoice(option)}\r\n                                disabled={selectedAnswer !== null}\r\n                            >\r\n                                {option}\r\n                                {selectedAnswer === option && (\r\n                                    <i className={`bi ${isCorrect ? \"bi-check-lg\" : \"bi-x\"}`} />\r\n                                )}\r\n                            </button>\r\n                        ))\r\n                    ) : (\r\n                        <p>Chargement des options...</p>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <div className=\"input-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={userInput}\r\n                        onChange={(e) => setUserInput(e.target.value)}\r\n                        placeholder=\"Écrivez la définition\"\r\n                    />\r\n                    <button onClick={handleInputSubmit}>\r\n                        <i className=\"bi bi-arrow-up-circle-fill\"></i>\r\n                    </button>\r\n                    {hasSubmitted && (\r\n                        <p className={isCorrect ? \"correct-text\" : \"incorrect-text\"}>\r\n                            {isCorrect\r\n                                ? \"Correct !\"\r\n                                : `Faux, la bonne réponse était : ${list.words[currentWordIndex].definition}`}\r\n                        </p>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Learn;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}