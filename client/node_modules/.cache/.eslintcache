[{"C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\index.js":"1","C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\App.js":"2","C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\pages\\Home.js":"3","C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\pages\\List.js":"4","C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\pages\\Cards.js":"5","C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\pages\\Learn.js":"6","C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\pages\\Login.js":"7","C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\index.js":"8","C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\App.js":"9","C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\pages\\Login.js":"10","C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\pages\\Cards.js":"11","C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\pages\\Home.js":"12","C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\pages\\List.js":"13","C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\pages\\Learn.js":"14"},{"size":207,"mtime":1743043189659,"results":"15","hashOfConfig":"16"},{"size":960,"mtime":1743848070500,"results":"17","hashOfConfig":"16"},{"size":5908,"mtime":1743850193987,"results":"18","hashOfConfig":"16"},{"size":3538,"mtime":1743865521832,"results":"19","hashOfConfig":"16"},{"size":3994,"mtime":1743911639325,"results":"20","hashOfConfig":"16"},{"size":9884,"mtime":1743915409124,"results":"21","hashOfConfig":"16"},{"size":2081,"mtime":1743850598418,"results":"22","hashOfConfig":"16"},{"size":207,"mtime":1743043189659,"results":"23","hashOfConfig":"24"},{"size":952,"mtime":1744012843277,"results":"25","hashOfConfig":"24"},{"size":2059,"mtime":1744003430780,"results":"26","hashOfConfig":"24"},{"size":4642,"mtime":1744012047926,"results":"27","hashOfConfig":"24"},{"size":5893,"mtime":1744003297360,"results":"28","hashOfConfig":"24"},{"size":3452,"mtime":1744011497339,"results":"29","hashOfConfig":"24"},{"size":9814,"mtime":1744003430788,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"icpvuw",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pcg6kj",{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\index.js",[],["63","64"],"C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\App.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\pages\\Home.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\pages\\List.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\pages\\Cards.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\pages\\Learn.js",["65","66"],"import React, {useEffect, useState} from \"react\";\r\nimport {useParams, useNavigate} from \"react-router-dom\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport \"./css/Learn.css\";\r\n\r\nconst Learn = () => {\r\n    const {id} = useParams();\r\n    const navigate = useNavigate();\r\n    const [list, setList] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [wordStats, setWordStats] = useState({});\r\n    const [currentWordIndex, setCurrentWordIndex] = useState(0);\r\n    const [currentExerciseType, setCurrentExerciseType] = useState(\"QCM\");\r\n    const [options, setOptions] = useState([]);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [isCorrect, setIsCorrect] = useState(null);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [hasSubmitted, setHasSubmitted] = useState(false);\r\n    const [sessionComplete, setSessionComplete] = useState(false);\r\n    const isWordMastered = (stats) => {\r\n        return stats.qcmCorrect >= 2 && stats.inputCorrect >= 2;\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const userId = localStorage.getItem(\"userId\");\r\n\r\n        fetch(`http://localhost:5000/api/users/${userId}/lists`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const selectedList = data.find(l => l.id === parseInt(id));\r\n                if (selectedList && selectedList.words.length > 0) {\r\n                    setList(selectedList);\r\n                    initializeWordStats(selectedList.words);\r\n                    generateOptions(selectedList.words[0], selectedList.words);\r\n                } else {\r\n                    console.error(\"Liste non trouvée ou vide.\");\r\n                }\r\n            })\r\n            .catch(error => console.error(\"Erreur de chargement de la liste\", error));\r\n    }, [id]);\r\n\r\n    const initializeWordStats = (words) => {\r\n        const stats = {};\r\n        words.forEach((word, index) => {\r\n            stats[index] = {\r\n                qcmCorrect: 0,\r\n                inputCorrect: 0,\r\n                usedRecently: false,\r\n            };\r\n        });\r\n        setWordStats(stats);\r\n    };\r\n\r\n\r\n    const generateOptions = (word, words) => {\r\n        if (!word || !words) return;\r\n\r\n        const correctDefinition = word.definition;\r\n        let incorrectDefs = words\r\n            .map(w => w.definition)\r\n            .filter(def => def !== correctDefinition);\r\n\r\n        incorrectDefs = incorrectDefs.sort(() => 0.5 - Math.random()).slice(0, 3);\r\n        const allOptions = [correctDefinition, ...incorrectDefs].sort(() => 0.5 - Math.random());\r\n\r\n        setOptions(allOptions);\r\n        setSelectedAnswer(null);\r\n        setIsCorrect(null);\r\n    };\r\n\r\n    const selectNextWord = () => {\r\n        if (!list || !list.words || Object.keys(wordStats).length === 0) return;\r\n\r\n        const notMasteredIndexes = Object.entries(wordStats)\r\n            .filter(([_, stats]) => !isWordMastered(stats))\r\n            .map(([index]) => index);\r\n\r\n        if (notMasteredIndexes.length === 0) {\r\n            setList(null);\r\n            setSessionComplete(true);\r\n            return;\r\n        }\r\n\r\n        let availableWords = notMasteredIndexes.filter(i => !wordStats[i].usedRecently);\r\n\r\n        if (availableWords.length === 0) {\r\n            notMasteredIndexes.forEach(i => wordStats[i].usedRecently = false);\r\n            availableWords = notMasteredIndexes;\r\n        }\r\n\r\n        const nextIndex = availableWords[Math.floor(Math.random() * availableWords.length)];\r\n\r\n        wordStats[nextIndex].usedRecently = true;\r\n        setWordStats({...wordStats});\r\n        setCurrentWordIndex(parseInt(nextIndex));\r\n\r\n        const nextStats = wordStats[nextIndex];\r\n        if (nextStats.qcmCorrect >= 2) {\r\n            setCurrentExerciseType(\"Input\");\r\n        } else {\r\n            setCurrentExerciseType(\"QCM\");\r\n            generateOptions(list.words[nextIndex], list.words);\r\n        }\r\n    };\r\n\r\n\r\n    const handleQCMChoice = (selectedDef) => {\r\n        if (!list) return;\r\n\r\n        const correctDef = list.words[currentWordIndex].definition;\r\n        const isAnswerCorrect = selectedDef === correctDef;\r\n\r\n        setSelectedAnswer(selectedDef);\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        const updatedStats = {...wordStats};\r\n        const currentStats = updatedStats[currentWordIndex];\r\n\r\n        if (isAnswerCorrect) {\r\n            currentStats.qcmCorrect += 1;\r\n\r\n            // Vérifie si le mot est maîtrisé\r\n            if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\r\n                currentStats.mastered = true;\r\n            }\r\n        }\r\n\r\n        setWordStats(updatedStats);\r\n        updateProgress(updatedStats);\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n        }, 1000);\r\n    };\r\n\r\n    const handleInputSubmit = () => {\r\n        if (!userInput.trim()) return;\r\n\r\n        setHasSubmitted(true);\r\n\r\n        const correctDef = list.words[currentWordIndex].definition;\r\n        const isAnswerCorrect = userInput.trim().toLowerCase() === correctDef.toLowerCase();\r\n\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        const updatedStats = {...wordStats};\r\n        const currentStats = updatedStats[currentWordIndex];\r\n\r\n        if (isAnswerCorrect) {\r\n            currentStats.inputCorrect += 1;\r\n\r\n            if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\r\n                currentStats.mastered = true;\r\n            }\r\n        }\r\n\r\n        setWordStats(updatedStats);\r\n        updateProgress(updatedStats);\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n            setUserInput(\"\");\r\n            setIsCorrect(null);\r\n            setHasSubmitted(false);\r\n        }, 1000);\r\n    };\r\n\r\n\r\n    const updateProgress = (updatedStats) => {\r\n        if (!list) return;\r\n\r\n        const totalWords = list.words.length;\r\n        const masteredWords = Object.values(updatedStats).filter(stat =>\r\n            stat.qcmCorrect >= 2 && stat.inputCorrect >= 2\r\n        ).length;\r\n\r\n        console.log(\"Progress:\", masteredWords, \"/\", totalWords); // Ajoute ceci pour voir\r\n\r\n        const newProgress = (masteredWords / totalWords) * 100;\r\n        setProgress(newProgress);\r\n    };\r\n\r\n    if (!list && !sessionComplete) {\r\n        return <p>Chargement...</p>;\r\n    }\r\n\r\n    if (sessionComplete) {\r\n        return (\r\n            <div className=\"learn-container\">\r\n                <h2>🎉 Félicitations !</h2>\r\n                <p>Tu as maîtrisé tous les mots de cette liste.</p>\r\n                <button onClick={() => {\r\n                    const userId = localStorage.getItem(\"userId\");\r\n                    navigate(`/user/${userId}/list/${id}`);}}>\r\n                    Retour à la liste\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"learn-container\">\r\n            <button\r\n                className=\"exit-button\"\r\n                onClick={() => {\r\n                    const userId = localStorage.getItem(\"userId\");\r\n                    navigate(`/user/${userId}/list/${id}`);\r\n                }}>\r\n                <i className=\"bi bi-x-lg\"></i>\r\n            </button>\r\n\r\n            <h2 className=\"term\">{list.words[currentWordIndex].term}</h2>\r\n            {currentExerciseType === \"QCM\" ? (\r\n                    <div className=\"options-container\">\r\n                        {options.length > 0 ? (\r\n                            options.map((option, index) => (\r\n                                <button\r\n                                    key={index}\r\n                                    className={`option-button ${\r\n                                        selectedAnswer\r\n                                            ? option === list.words[currentWordIndex].definition\r\n                                                ? \"correct\"\r\n                                                : option === selectedAnswer\r\n                                                    ? \"incorrect\"\r\n                                                    : \"\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() => handleQCMChoice(option)}\r\n                                    disabled={selectedAnswer !== null}\r\n                                >\r\n                                    {option}\r\n                                    {selectedAnswer === option && (\r\n                                        <i className={`bi ${isCorrect ? \"bi-check-lg\" : \"bi-x\"}`}/>\r\n                                    )}\r\n                                </button>\r\n                            ))\r\n                        ) : (\r\n                            <p>Chargement des options...</p>\r\n                        )}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={userInput}\r\n                            onChange={(e) => setUserInput(e.target.value)}\r\n                            placeholder=\"Écrivez la définition\"\r\n                        />\r\n                        <button onClick={handleInputSubmit}>\r\n                            <i className=\"bi bi-arrow-up-circle-fill\"></i>\r\n                        </button>\r\n                        {hasSubmitted && (\r\n                            <p className={isCorrect ? \"correct-text\" : \"incorrect-text\"}>\r\n                                {isCorrect\r\n                                    ? \"Correct !\"\r\n                                    : `Faux, la bonne réponse était : ${list.words[currentWordIndex].definition}`}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n        ;\r\n};\r\n\r\nexport default Learn;\r\n","C:\\Users\\cyrie\\Documents\\Projets\\turboquizz\\client\\src\\pages\\Login.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\index.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\App.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\pages\\Login.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\pages\\Cards.js",["67","68"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport {Card, Carousel} from 'react-bootstrap';\r\nimport \"./css/Cards.css\";\r\n\r\nconst Cards = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    const [list, setList] = useState(null);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [flippedCards, setFlippedCards] = useState({});\r\n    const [correctCount, setCorrectCount] = useState(0);\r\n    const [incorrectCount, setIncorrectCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const userId = localStorage.getItem(\"userId\");\r\n\r\n        fetch(`https://turboquizz.onrender.com/api/users/${userId}/lists`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                const foundList = data.find((l) => l.id === parseInt(id));\r\n                setList(foundList);\r\n            })\r\n            .catch((error) => console.error(\"Erreur de chargement de la liste\", error));\r\n    }, [id]);\r\n\r\n    const handleFlip = (index) => {\r\n        setFlippedCards((prev) => ({\r\n            ...prev,\r\n            [index]: !prev[index],\r\n        }));\r\n    };\r\n\r\n    const handleAnswer = (isCorrect) => {\r\n        if (currentIndex < list.words.length) {\r\n            if (isCorrect && correctCount < list.words.length) {\r\n                setCorrectCount(correctCount + 1);\r\n            } else if (!isCorrect && incorrectCount < list.words.length) {\r\n                setIncorrectCount(incorrectCount + 1);\r\n            }\r\n\r\n            if (currentIndex < list.words.length - 1) {\r\n                setCurrentIndex(currentIndex + 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    if (!list) return <p>Loading...</p>;\r\n\r\n    const word = list.words[currentIndex];\r\n    const isFlipped = flippedCards[currentIndex];\r\n\r\n    return (\r\n        <div className=\"card-container\">\r\n            <button\r\n                className=\"exit-button\"\r\n                onClick={() => {\r\n                    const userId = localStorage.getItem(\"userId\");\r\n                    navigate(`/user/${userId}/list/${id}`);\r\n                }}\r\n            >\r\n                <i className=\"bi bi-x-lg\"></i>\r\n            </button>\r\n\r\n            <div className=\"progress-counter\">\r\n                {currentIndex + 1}/{list.words.length}\r\n            </div>\r\n\r\n            <div className=\"score-container\">\r\n                <div className=\"score-circle incorrect-score\">\r\n                    <span>{incorrectCount}</span>\r\n                </div>\r\n                <div className=\"score-circle correct-score\">\r\n                    <span>{correctCount}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <Carousel>\r\n                {list.words.map((word, index) => (\r\n                    <Carousel.Item key={index}>\r\n                        <div className=\"carousel-item-content\">\r\n                            <div className={`flip-card ${flippedCards[index] ? \"flipped\" : \"\"}`}\r\n                                 onClick={() => handleFlip(index)}>\r\n                                <div className=\"flip-card-front\">\r\n                                    <Card className=\"custom-card\">\r\n                                        <Card.Body className=\"d-flex justify-content-center align-items-center\">\r\n                                            <h3 className=\"term-text\">{word.term}</h3>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </div>\r\n\r\n                                <div className=\"flip-card-back\">\r\n                                    <Card className=\"custom-card back\">\r\n                                        <Card.Body className=\"d-flex justify-content-center align-items-center\">\r\n                                            <p className=\"definition-text\">{word.definition}</p>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Carousel.Item>\r\n                ))}\r\n            </Carousel>\r\n\r\n            <div className=\"button2-group\">\r\n                <button className=\"incorrect-button\" onClick={() => handleAnswer(false)}>\r\n                    <i className=\"bi bi-x-lg\"></i>\r\n                </button>\r\n                <button className=\"correct-button\" onClick={() => handleAnswer(true)}>\r\n                    <i className=\"bi bi-check-lg\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\pages\\Home.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\pages\\List.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\turboQuizz\\client\\src\\pages\\Learn.js",["69"],"import React, {useEffect, useState} from \"react\";\r\nimport {useParams, useNavigate} from \"react-router-dom\";\r\nimport \"./css/Learn.css\";\r\n\r\nconst Learn = () => {\r\n    const {id} = useParams();\r\n    const navigate = useNavigate();\r\n    const [list, setList] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [wordStats, setWordStats] = useState({});\r\n    const [currentWordIndex, setCurrentWordIndex] = useState(0);\r\n    const [currentExerciseType, setCurrentExerciseType] = useState(\"QCM\");\r\n    const [options, setOptions] = useState([]);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [isCorrect, setIsCorrect] = useState(null);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [hasSubmitted, setHasSubmitted] = useState(false);\r\n    const [sessionComplete, setSessionComplete] = useState(false);\r\n    const isWordMastered = (stats) => {\r\n        return stats.qcmCorrect >= 2 && stats.inputCorrect >= 2;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const userId = localStorage.getItem(\"userId\");\r\n\r\n        fetch(`https://turboquizz.onrender.com/api/users/${userId}/lists`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const selectedList = data.find(l => l.id === parseInt(id));\r\n                if (selectedList && selectedList.words.length > 0) {\r\n                    setList(selectedList);\r\n                    initializeWordStats(selectedList.words);\r\n                    generateOptions(selectedList.words[0], selectedList.words);\r\n                } else {\r\n                    console.error(\"Liste non trouvée ou vide.\");\r\n                }\r\n            })\r\n            .catch(error => console.error(\"Erreur de chargement de la liste\", error));\r\n    }, [id]);\r\n\r\n    const initializeWordStats = (words) => {\r\n        const stats = {};\r\n        words.forEach((word, index) => {\r\n            stats[index] = {\r\n                qcmCorrect: 0,\r\n                inputCorrect: 0,\r\n                usedRecently: false,\r\n            };\r\n        });\r\n        setWordStats(stats);\r\n    };\r\n\r\n    const generateOptions = (word, words) => {\r\n        if (!word || !words) return;\r\n\r\n        const correctDefinition = word.definition;\r\n        let incorrectDefs = words\r\n            .map(w => w.definition)\r\n            .filter(def => def !== correctDefinition);\r\n\r\n        incorrectDefs = incorrectDefs.sort(() => 0.5 - Math.random()).slice(0, 3);\r\n        const allOptions = [correctDefinition, ...incorrectDefs].sort(() => 0.5 - Math.random());\r\n\r\n        setOptions(allOptions);\r\n        setSelectedAnswer(null);\r\n        setIsCorrect(null);\r\n    };\r\n\r\n    const selectNextWord = () => {\r\n        if (!list || !list.words || Object.keys(wordStats).length === 0) return;\r\n\r\n        const notMasteredIndexes = Object.entries(wordStats)\r\n            .filter(([_, stats]) => !isWordMastered(stats))\r\n            .map(([index]) => index);\r\n\r\n        if (notMasteredIndexes.length === 0) {\r\n            setList(null);\r\n            setSessionComplete(true);\r\n            return;\r\n        }\r\n\r\n        let availableWords = notMasteredIndexes.filter(i => !wordStats[i].usedRecently);\r\n\r\n        if (availableWords.length === 0) {\r\n            notMasteredIndexes.forEach(i => wordStats[i].usedRecently = false);\r\n            availableWords = notMasteredIndexes;\r\n        }\r\n\r\n        const nextIndex = availableWords[Math.floor(Math.random() * availableWords.length)];\r\n\r\n        wordStats[nextIndex].usedRecently = true;\r\n        setWordStats({...wordStats});\r\n        setCurrentWordIndex(parseInt(nextIndex));\r\n\r\n        const nextStats = wordStats[nextIndex];\r\n        if (nextStats.qcmCorrect >= 2) {\r\n            setCurrentExerciseType(\"Input\");\r\n        } else {\r\n            setCurrentExerciseType(\"QCM\");\r\n            generateOptions(list.words[nextIndex], list.words);\r\n        }\r\n    };\r\n\r\n    const handleQCMChoice = (selectedDef) => {\r\n        if (!list) return;\r\n\r\n        const correctDef = list.words[currentWordIndex].definition;\r\n        const isAnswerCorrect = selectedDef === correctDef;\r\n\r\n        setSelectedAnswer(selectedDef);\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        const updatedStats = {...wordStats};\r\n        const currentStats = updatedStats[currentWordIndex];\r\n\r\n        if (isAnswerCorrect) {\r\n            currentStats.qcmCorrect += 1;\r\n\r\n            // Vérifie si le mot est maîtrisé\r\n            if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\r\n                currentStats.mastered = true;\r\n            }\r\n        }\r\n\r\n        setWordStats(updatedStats);\r\n        updateProgress(updatedStats);\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n        }, 1000);\r\n    };\r\n\r\n    const handleInputSubmit = () => {\r\n        if (!userInput.trim()) return;\r\n\r\n        setHasSubmitted(true);\r\n\r\n        const correctDef = list.words[currentWordIndex].definition;\r\n        const isAnswerCorrect = userInput.trim().toLowerCase() === correctDef.toLowerCase();\r\n\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        const updatedStats = {...wordStats};\r\n        const currentStats = updatedStats[currentWordIndex];\r\n\r\n        if (isAnswerCorrect) {\r\n            currentStats.inputCorrect += 1;\r\n\r\n            if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\r\n                currentStats.mastered = true;\r\n            }\r\n        }\r\n\r\n        setWordStats(updatedStats);\r\n        updateProgress(updatedStats);\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n            setUserInput(\"\");\r\n            setIsCorrect(null);\r\n            setHasSubmitted(false);\r\n        }, 1000);\r\n    };\r\n\r\n\r\n    const updateProgress = (updatedStats) => {\r\n        if (!list) return;\r\n\r\n        const totalWords = list.words.length;\r\n        const masteredWords = Object.values(updatedStats).filter(stat =>\r\n            stat.qcmCorrect >= 2 && stat.inputCorrect >= 2\r\n        ).length;\r\n\r\n        console.log(\"Progress:\", masteredWords, \"/\", totalWords); // Ajoute ceci pour voir\r\n\r\n        const newProgress = (masteredWords / totalWords) * 100;\r\n        setProgress(newProgress);\r\n    };\r\n\r\n    if (!list && !sessionComplete) {\r\n        return <p>Loading...</p>;\r\n    }\r\n\r\n    if (sessionComplete) {\r\n        return (\r\n            <div className=\"learn-container\">\r\n                <h2>🎉 Congrats !</h2>\r\n                <p>You've mastered all the words on this list.</p>\r\n                <button onClick={() => {\r\n                    const userId = localStorage.getItem(\"userId\");\r\n                    navigate(`/user/${userId}/list/${id}`);}}>\r\n                    Back to the list\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"learn-container\">\r\n            <button\r\n                className=\"exit-button\"\r\n                onClick={() => {\r\n                    const userId = localStorage.getItem(\"userId\");\r\n                    navigate(`/user/${userId}/list/${id}`);\r\n                }}>\r\n                <i className=\"bi bi-x-lg\"></i>\r\n            </button>\r\n\r\n            <h2 className=\"term\">{list.words[currentWordIndex].term}</h2>\r\n            {currentExerciseType === \"QCM\" ? (\r\n                    <div className=\"options-container\">\r\n                        {options.length > 0 ? (\r\n                            options.map((option, index) => (\r\n                                <button\r\n                                    key={index}\r\n                                    className={`option-button ${\r\n                                        selectedAnswer\r\n                                            ? option === list.words[currentWordIndex].definition\r\n                                                ? \"correct\"\r\n                                                : option === selectedAnswer\r\n                                                    ? \"incorrect\"\r\n                                                    : \"\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() => handleQCMChoice(option)}\r\n                                    disabled={selectedAnswer !== null}\r\n                                >\r\n                                    {option}\r\n                                    {selectedAnswer === option && (\r\n                                        <i className={`bi ${isCorrect ? \"bi-check-lg\" : \"bi-x\"}`}/>\r\n                                    )}\r\n                                </button>\r\n                            ))\r\n                        ) : (\r\n                            <p>Loading of options...</p>\r\n                        )}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={userInput}\r\n                            onChange={(e) => setUserInput(e.target.value)}\r\n                            placeholder=\"Écrivez la définition\"\r\n                        />\r\n                        <button onClick={handleInputSubmit}>\r\n                            <i className=\"bi bi-arrow-up-circle-fill\"></i>\r\n                        </button>\r\n                        {hasSubmitted && (\r\n                            <p className={isCorrect ? \"correct-text\" : \"incorrect-text\"}>\r\n                                {isCorrect\r\n                                    ? \"Correct !\"\r\n                                    : `Faux, la bonne réponse était : ${list.words[currentWordIndex].definition}`}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n        ;\r\n};\r\n\r\nexport default Learn;\r\n",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":3,"column":8,"nodeType":"76","messageId":"77","endLine":3,"endColumn":19},{"ruleId":"74","severity":1,"message":"78","line":10,"column":12,"nodeType":"76","messageId":"77","endLine":10,"endColumn":20},{"ruleId":"74","severity":1,"message":"79","line":51,"column":11,"nodeType":"76","messageId":"77","endLine":51,"endColumn":15},{"ruleId":"74","severity":1,"message":"80","line":52,"column":11,"nodeType":"76","messageId":"77","endLine":52,"endColumn":20},{"ruleId":"74","severity":1,"message":"78","line":9,"column":12,"nodeType":"76","messageId":"77","endLine":9,"endColumn":20},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'ProgressBar' is defined but never used.","Identifier","unusedVar","'progress' is assigned a value but never used.","'word' is assigned a value but never used.","'isFlipped' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]