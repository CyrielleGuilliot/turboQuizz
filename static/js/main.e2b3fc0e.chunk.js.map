{"version":3,"sources":["pages/Home.js","pages/List.js","pages/Cards.js","pages/Login.js","pages/Learn.js","App.js","index.js"],"names":["Home","showPopup","setShowPopup","useState","lists","setLists","newList","setNewList","title","words","term","definition","navigate","useNavigate","userId","useParams","useEffect","fetch","then","response","json","data","catch","error","console","togglePopup","handleWordChange","index","e","name","value","target","updatedWords","_jsxs","className","children","_jsx","onClick","size","map","list","handleListClick","id","style","cursor","length","onSubmit","preventDefault","method","headers","body","JSON","stringify","res","type","placeholder","onChange","required","word","handleAddWord","List","setList","flippedCards","setFlippedCards","uid","localStorage","getItem","foundList","find","l","parseInt","Carousel","Item","prev","handleFlip","Card","Body","Cards","currentIndex","setCurrentIndex","flipped","setFlipped","correctCount","setCorrectCount","incorrectCount","setIncorrectCount","handleAnswer","isCorrect","Login","username","setUsername","password","setPassword","setError","async","success","setItem","err","Learn","progress","setProgress","wordStats","setWordStats","currentWordIndex","setCurrentWordIndex","currentExerciseType","setCurrentExerciseType","options","setOptions","selectedAnswer","setSelectedAnswer","setIsCorrect","userInput","setUserInput","hasSubmitted","setHasSubmitted","sessionComplete","setSessionComplete","selectedList","initializeWordStats","generateOptions","stats","forEach","qcmCorrect","inputCorrect","usedRecently","correctDefinition","incorrectDefs","w","filter","def","sort","Math","random","slice","allOptions","selectNextWord","Object","keys","notMasteredIndexes","entries","_ref","_","isWordMastered","_ref2","availableWords","i","nextIndex","floor","updateProgress","updatedStats","totalWords","masteredWords","values","stat","log","option","selectedDef","isAnswerCorrect","currentStats","mastered","setTimeout","handleQCMChoice","disabled","handleInputSubmit","trim","correctDef","toLowerCase","App","BrowserRouter","basename","Routes","Route","path","element","Navigate","to","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2b3fc0e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./css/Home.css\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const [lists, setLists] = useState([]);\r\n    const [newList, setNewList] = useState({\r\n        title: \"\",\r\n        words: [\r\n            { term: \"\", definition: \"\" },\r\n            { term: \"\", definition: \"\" }\r\n        ],\r\n    });\r\n\r\n    const navigate = useNavigate();\r\n    const { userId } = useParams(); // ⬅️ récupère depuis l'URL\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:5000/api/users/${userId}/lists`)\r\n            .then((response) => response.json())\r\n            .then((data) => setLists(data))\r\n            .catch((error) => console.error(\"Erreur lors du chargement des listes\", error));\r\n    }, [userId]);\r\n\r\n    const handleListClick = (id) => {\r\n        navigate(`/user/${userId}/list/${id}`);\r\n    };\r\n\r\n    const togglePopup = () => {\r\n        setShowPopup(!showPopup);\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setNewList({ ...newList, title: e.target.value });\r\n    };\r\n\r\n    const handleAddWord = () => {\r\n        setNewList({\r\n            ...newList,\r\n            words: [...newList.words, { term: \"\", definition: \"\" }],\r\n        });\r\n    };\r\n\r\n    const handleWordChange = (index, e) => {\r\n        const { name, value } = e.target;\r\n        const updatedWords = [...newList.words];\r\n        updatedWords[index][name] = value;\r\n        setNewList({ ...newList, words: updatedWords });\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        fetch(`http://localhost:5000/api/users/${userId}/lists`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(newList),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setLists([...lists, data]);\r\n                setShowPopup(false);\r\n                setNewList({\r\n                    title: \"\",\r\n                    words: [\r\n                        { term: \"\", definition: \"\" },\r\n                        { term: \"\", definition: \"\" }\r\n                    ]\r\n                });\r\n            })\r\n            .catch((error) => console.error(\"Erreur ajout liste:\", error));\r\n    };\r\n\r\n    return (\r\n        <div className=\"lists-container\">\r\n            <div>\r\n                <div className=\"titleHome\">Lists :</div>\r\n                <button className=\"add-button\" onClick={togglePopup}>\r\n                    <ion-icon name=\"add-circle-outline\" size=\"large\"></ion-icon>\r\n                    Add list\r\n                </button>\r\n            </div>\r\n            <div className=\"lists-grid\">\r\n                {lists.map((list) => (\r\n                    <div\r\n                        key={list.id}\r\n                        className=\"list-card\"\r\n                        onClick={() => handleListClick(list.id)}\r\n                        style={{ cursor: \"pointer\" }}\r\n                    >\r\n                        <h3>{list.title}</h3>\r\n                        <p>{list.words.length} termes</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {showPopup && (\r\n                <div className=\"popup-overlay\">\r\n                    <div className=\"popup-content\">\r\n                        <h3>Create a list</h3>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"title\"\r\n                                placeholder=\"Title\"\r\n                                value={newList.title}\r\n                                onChange={handleChange}\r\n                                required\r\n                            />\r\n                            {newList.words.map((word, index) => (\r\n                                <div key={index} className=\"word-card\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        name=\"term\"\r\n                                        placeholder=\"Term\"\r\n                                        value={word.term}\r\n                                        onChange={(e) => handleWordChange(index, e)}\r\n                                        required\r\n                                    />\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        name=\"definition\"\r\n                                        placeholder=\"Definition\"\r\n                                        value={word.definition}\r\n                                        onChange={(e) => handleWordChange(index, e)}\r\n                                        required\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={handleAddWord}\r\n                                className=\"add-word-button\"\r\n                            >\r\n                                <ion-icon name=\"add-outline\"></ion-icon>\r\n                            </button>\r\n                            <div className=\"popup-buttons\">\r\n                                <button type=\"submit\" className=\"save-button\">\r\n                                    Save\r\n                                </button>\r\n                                <button type=\"button\" className=\"cancel-button\" onClick={togglePopup}>\r\n                                    Cancel\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { Carousel, Card } from 'react-bootstrap';\r\nimport \"./css/List.css\";\r\n\r\nconst List = () => {\r\n    const { id, userId } = useParams(); // récupère les paramètres d'URL\r\n    const navigate = useNavigate();\r\n    const [list, setList] = useState(null);\r\n    const [flippedCards, setFlippedCards] = useState({});\r\n\r\n    useEffect(() => {\r\n        const uid = userId || localStorage.getItem(\"userId\"); // fallback si pas dans l'URL\r\n        if (!uid) return;\r\n\r\n        fetch(`http://localhost:5000/api/users/${uid}/lists`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                const foundList = data.find((l) => l.id === parseInt(id));\r\n                setList(foundList);\r\n            })\r\n            .catch((error) =>\r\n                console.error(\"Erreur de chargement de la liste\", error)\r\n            );\r\n    }, [id, userId]);\r\n\r\n    const handleFlip = (index) => {\r\n        setFlippedCards((prev) => ({\r\n            ...prev,\r\n            [index]: !prev[index],\r\n        }));\r\n    };\r\n\r\n    if (!list) return <p>Chargement...</p>;\r\n\r\n    return (\r\n        <div className=\"list-container\">\r\n            <button className=\"back-button\" onClick={() => navigate(`/user/${userId}/home`)}>\r\n                <i className=\"bi bi-arrow-left\"></i>\r\n            </button>\r\n\r\n            <Carousel>\r\n                {list.words.map((word, index) => (\r\n                    <Carousel.Item key={index}>\r\n                        <div className=\"carousel-item-content\">\r\n                            <div\r\n                                className={`flip-card ${flippedCards[index] ? \"flipped\" : \"\"}`}\r\n                                onClick={() => handleFlip(index)}\r\n                            >\r\n                                <div className=\"flip-card-front\">\r\n                                    <Card className=\"custom-card\">\r\n                                        <Card.Body className=\"d-flex justify-content-center align-items-center\">\r\n                                            <h3 className=\"term-text\">{word.term}</h3>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </div>\r\n\r\n                                <div className=\"flip-card-back\">\r\n                                    <Card className=\"custom-card back\">\r\n                                        <Card.Body className=\"d-flex justify-content-center align-items-center\">\r\n                                            <p className=\"definition-text\">{word.definition}</p>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Carousel.Item>\r\n                ))}\r\n            </Carousel>\r\n\r\n            <div className=\"button-group\">\r\n                <button className=\"cards-button\" onClick={() => navigate(`/user/${userId}/list/${id}/cards`)}>\r\n                    <i className=\"bi bi-front\"></i>\r\n                    Cards\r\n                </button>\r\n\r\n                <button className=\"cards-button\" onClick={() => navigate(`/user/${userId}/list/${id}/learn`)}>\r\n                    <i className=\"bi bi-graph-up-arrow\"></i>\r\n                    Learn\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default List;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport \"./css/Cards.css\";\r\n\r\nconst Cards = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    // États\r\n    const [list, setList] = useState(null);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [flipped, setFlipped] = useState(false);\r\n    const [correctCount, setCorrectCount] = useState(0);\r\n    const [incorrectCount, setIncorrectCount] = useState(0);\r\n\r\n    // Récupération des mots depuis l'API\r\n    useEffect(() => {\r\n        const userId = localStorage.getItem(\"userId\");\r\n\r\n        fetch(`http://localhost:5000/api/users/${userId}/lists`)\r\n\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                const foundList = data.find((l) => l.id === parseInt(id));\r\n                setList(foundList);\r\n            })\r\n            .catch((error) => console.error(\"Erreur de chargement de la liste\", error));\r\n    }, [id]);\r\n\r\n    if (!list) return <p>Chargement...</p>;\r\n    const words = list.words;\r\n\r\n    // Fonction pour retourner la carte\r\n    const handleFlip = () => {\r\n        setFlipped(!flipped);\r\n    };\r\n\r\n    // Fonction pour gérer la réponse (correcte ou incorrecte)\r\n    const handleAnswer = (isCorrect) => {\r\n        if (currentIndex < words.length) {\r\n            if (isCorrect && correctCount < words.length) {\r\n                setCorrectCount(correctCount + 1);\r\n            } else if (!isCorrect && incorrectCount < words.length) {\r\n                setIncorrectCount(incorrectCount + 1);\r\n            }\r\n\r\n            // Passer à la carte suivante si on n'est pas à la dernière\r\n            if (currentIndex < words.length - 1) {\r\n                setCurrentIndex(currentIndex + 1);\r\n                setFlipped(false);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"card-container\">\r\n            {/* Bouton de sortie */}\r\n            <button\r\n                className=\"exit-button\"\r\n                onClick={() => {\r\n                    const userId = localStorage.getItem(\"userId\");\r\n                    navigate(`/user/${userId}/list/${id}`);\r\n                }}>\r\n                <i className=\"bi bi-x-lg\"></i>\r\n            </button>\r\n\r\n\r\n            {/* Compteur de progression */}\r\n            <div className=\"progress-counter\">{currentIndex + 1}/{words.length}</div>\r\n\r\n            {/* Compteurs de réponses */}\r\n            <div className=\"score-container\">\r\n                <div className=\"score-circle incorrect-score\">\r\n                    <span>{incorrectCount}</span>\r\n                </div>\r\n                <div className=\"score-circle correct-score\">\r\n                    <span>{correctCount}</span>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            {/* Carte retournable */}\r\n            <div className={`flip-card ${flipped ? \"flipped\" : \"\"}`} onClick={handleFlip}>\r\n                <div className=\"flip-card-inner\">\r\n                    {/* Face avant */}\r\n                    <div className=\"flip-card-front\">\r\n                        <div className=\"card-content\">{words[currentIndex].term}</div>\r\n                    </div>\r\n                    {/* Face arrière */}\r\n                    <div className=\"flip-card-back\">\r\n                        <div className=\"card-content\">{words[currentIndex].definition}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Boutons de validation */}\r\n            <div className=\"button2-group\">\r\n                <button className=\"incorrect-button\" onClick={() => handleAnswer(false)}>\r\n                    <i className=\"bi bi-x-lg\"></i>\r\n                </button>\r\n                <button className=\"correct-button\" onClick={() => handleAnswer(true)}>\r\n                    <i className=\"bi bi-check-lg\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import React, {useState} from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport \"./css/Login.css\";\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/api/login\", {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({username, password}),\r\n            });\r\n\r\n            const data = await response.json();\r\n            if (data.success) {\r\n                const userId = data.userId;\r\n                localStorage.setItem(\"userId\", userId);\r\n                navigate(`/user/${userId}/home`);\r\n            } else {\r\n                setError(\"Nom d'utilisateur ou mot de passe incorrect\");\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Erreur lors de la tentative de connexion :\", err);\r\n            setError(\"Erreur de connexion au serveur\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-container\">\r\n            <h2>Connexion</h2>\r\n            <form onSubmit={handleLogin} className=\"login-form\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Nom d'utilisateur\"\r\n                    value={username}\r\n                    onChange={(e) => setUsername(e.target.value)}\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Mot de passe\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    required\r\n                />\r\n                <button type=\"submit\">Se connecter</button>\r\n                {error && <p className=\"error-message\">{error}</p>}\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useParams, useNavigate} from \"react-router-dom\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport \"./css/Learn.css\";\r\n\r\nconst Learn = () => {\r\n    const {id} = useParams();\r\n    const navigate = useNavigate();\r\n    const [list, setList] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [wordStats, setWordStats] = useState({});\r\n    const [currentWordIndex, setCurrentWordIndex] = useState(0);\r\n    const [currentExerciseType, setCurrentExerciseType] = useState(\"QCM\");\r\n    const [options, setOptions] = useState([]);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [isCorrect, setIsCorrect] = useState(null);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [hasSubmitted, setHasSubmitted] = useState(false);\r\n    const [sessionComplete, setSessionComplete] = useState(false);\r\n    const isWordMastered = (stats) => {\r\n        return stats.qcmCorrect >= 2 && stats.inputCorrect >= 2;\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const userId = localStorage.getItem(\"userId\");\r\n\r\n        fetch(`http://localhost:5000/api/users/${userId}/lists`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const selectedList = data.find(l => l.id === parseInt(id));\r\n                if (selectedList && selectedList.words.length > 0) {\r\n                    setList(selectedList);\r\n                    initializeWordStats(selectedList.words);\r\n                    generateOptions(selectedList.words[0], selectedList.words);\r\n                } else {\r\n                    console.error(\"Liste non trouvée ou vide.\");\r\n                }\r\n            })\r\n            .catch(error => console.error(\"Erreur de chargement de la liste\", error));\r\n    }, [id]);\r\n\r\n    const initializeWordStats = (words) => {\r\n        const stats = {};\r\n        words.forEach((word, index) => {\r\n            stats[index] = {\r\n                qcmCorrect: 0,\r\n                inputCorrect: 0,\r\n                usedRecently: false,\r\n            };\r\n        });\r\n        setWordStats(stats);\r\n    };\r\n\r\n\r\n    const generateOptions = (word, words) => {\r\n        if (!word || !words) return;\r\n\r\n        const correctDefinition = word.definition;\r\n        let incorrectDefs = words\r\n            .map(w => w.definition)\r\n            .filter(def => def !== correctDefinition);\r\n\r\n        incorrectDefs = incorrectDefs.sort(() => 0.5 - Math.random()).slice(0, 3);\r\n        const allOptions = [correctDefinition, ...incorrectDefs].sort(() => 0.5 - Math.random());\r\n\r\n        setOptions(allOptions);\r\n        setSelectedAnswer(null);\r\n        setIsCorrect(null);\r\n    };\r\n\r\n    const selectNextWord = () => {\r\n        if (!list || !list.words || Object.keys(wordStats).length === 0) return;\r\n\r\n        const notMasteredIndexes = Object.entries(wordStats)\r\n            .filter(([_, stats]) => !isWordMastered(stats))\r\n            .map(([index]) => index);\r\n\r\n        if (notMasteredIndexes.length === 0) {\r\n            setList(null);\r\n            setSessionComplete(true);\r\n            return;\r\n        }\r\n\r\n        let availableWords = notMasteredIndexes.filter(i => !wordStats[i].usedRecently);\r\n\r\n        if (availableWords.length === 0) {\r\n            notMasteredIndexes.forEach(i => wordStats[i].usedRecently = false);\r\n            availableWords = notMasteredIndexes;\r\n        }\r\n\r\n        const nextIndex = availableWords[Math.floor(Math.random() * availableWords.length)];\r\n\r\n        wordStats[nextIndex].usedRecently = true;\r\n        setWordStats({...wordStats});\r\n        setCurrentWordIndex(parseInt(nextIndex));\r\n\r\n        const nextStats = wordStats[nextIndex];\r\n        if (nextStats.qcmCorrect >= 2) {\r\n            setCurrentExerciseType(\"Input\");\r\n        } else {\r\n            setCurrentExerciseType(\"QCM\");\r\n            generateOptions(list.words[nextIndex], list.words);\r\n        }\r\n    };\r\n\r\n\r\n    const handleQCMChoice = (selectedDef) => {\r\n        if (!list) return;\r\n\r\n        const correctDef = list.words[currentWordIndex].definition;\r\n        const isAnswerCorrect = selectedDef === correctDef;\r\n\r\n        setSelectedAnswer(selectedDef);\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        const updatedStats = {...wordStats};\r\n        const currentStats = updatedStats[currentWordIndex];\r\n\r\n        if (isAnswerCorrect) {\r\n            currentStats.qcmCorrect += 1;\r\n\r\n            // Vérifie si le mot est maîtrisé\r\n            if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\r\n                currentStats.mastered = true;\r\n            }\r\n        }\r\n\r\n        setWordStats(updatedStats);\r\n        updateProgress(updatedStats);\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n        }, 1000);\r\n    };\r\n\r\n    const handleInputSubmit = () => {\r\n        if (!userInput.trim()) return;\r\n\r\n        setHasSubmitted(true);\r\n\r\n        const correctDef = list.words[currentWordIndex].definition;\r\n        const isAnswerCorrect = userInput.trim().toLowerCase() === correctDef.toLowerCase();\r\n\r\n        setIsCorrect(isAnswerCorrect);\r\n\r\n        const updatedStats = {...wordStats};\r\n        const currentStats = updatedStats[currentWordIndex];\r\n\r\n        if (isAnswerCorrect) {\r\n            currentStats.inputCorrect += 1;\r\n\r\n            if (currentStats.qcmCorrect >= 2 && currentStats.inputCorrect >= 2) {\r\n                currentStats.mastered = true;\r\n            }\r\n        }\r\n\r\n        setWordStats(updatedStats);\r\n        updateProgress(updatedStats);\r\n\r\n        setTimeout(() => {\r\n            selectNextWord();\r\n            setUserInput(\"\");\r\n            setIsCorrect(null);\r\n            setHasSubmitted(false);\r\n        }, 1000);\r\n    };\r\n\r\n\r\n    const updateProgress = (updatedStats) => {\r\n        if (!list) return;\r\n\r\n        const totalWords = list.words.length;\r\n        const masteredWords = Object.values(updatedStats).filter(stat =>\r\n            stat.qcmCorrect >= 2 && stat.inputCorrect >= 2\r\n        ).length;\r\n\r\n        console.log(\"Progress:\", masteredWords, \"/\", totalWords); // Ajoute ceci pour voir\r\n\r\n        const newProgress = (masteredWords / totalWords) * 100;\r\n        setProgress(newProgress);\r\n    };\r\n\r\n    if (!list && !sessionComplete) {\r\n        return <p>Chargement...</p>;\r\n    }\r\n\r\n    if (sessionComplete) {\r\n        return (\r\n            <div className=\"learn-container\">\r\n                <h2>🎉 Félicitations !</h2>\r\n                <p>Tu as maîtrisé tous les mots de cette liste.</p>\r\n                <button onClick={() => {\r\n                    const userId = localStorage.getItem(\"userId\");\r\n                    navigate(`/user/${userId}/list/${id}`);}}>\r\n                    Retour à la liste\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"learn-container\">\r\n            <button\r\n                className=\"exit-button\"\r\n                onClick={() => {\r\n                    const userId = localStorage.getItem(\"userId\");\r\n                    navigate(`/user/${userId}/list/${id}`);\r\n                }}>\r\n                <i className=\"bi bi-x-lg\"></i>\r\n            </button>\r\n\r\n            <h2 className=\"term\">{list.words[currentWordIndex].term}</h2>\r\n            {currentExerciseType === \"QCM\" ? (\r\n                    <div className=\"options-container\">\r\n                        {options.length > 0 ? (\r\n                            options.map((option, index) => (\r\n                                <button\r\n                                    key={index}\r\n                                    className={`option-button ${\r\n                                        selectedAnswer\r\n                                            ? option === list.words[currentWordIndex].definition\r\n                                                ? \"correct\"\r\n                                                : option === selectedAnswer\r\n                                                    ? \"incorrect\"\r\n                                                    : \"\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() => handleQCMChoice(option)}\r\n                                    disabled={selectedAnswer !== null}\r\n                                >\r\n                                    {option}\r\n                                    {selectedAnswer === option && (\r\n                                        <i className={`bi ${isCorrect ? \"bi-check-lg\" : \"bi-x\"}`}/>\r\n                                    )}\r\n                                </button>\r\n                            ))\r\n                        ) : (\r\n                            <p>Chargement des options...</p>\r\n                        )}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={userInput}\r\n                            onChange={(e) => setUserInput(e.target.value)}\r\n                            placeholder=\"Écrivez la définition\"\r\n                        />\r\n                        <button onClick={handleInputSubmit}>\r\n                            <i className=\"bi bi-arrow-up-circle-fill\"></i>\r\n                        </button>\r\n                        {hasSubmitted && (\r\n                            <p className={isCorrect ? \"correct-text\" : \"incorrect-text\"}>\r\n                                {isCorrect\r\n                                    ? \"Correct !\"\r\n                                    : `Faux, la bonne réponse était : ${list.words[currentWordIndex].definition}`}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n        ;\r\n};\r\n\r\nexport default Learn;\r\n","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./App.css\"\r\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\r\nimport Home from \"./pages/Home\";\r\nimport List from \"./pages/List\";\r\nimport Cards from \"./pages/Cards\";\r\nimport Login from \"./pages/Login\";\r\nimport Learn from \"./pages/Learn\";\r\n\r\nfunction App() {\r\n    return (\r\n        <BrowserRouter basename=\"/turboQuizz\">\r\n            <Routes>\r\n                <Route path=\"/\" element={<Navigate to=\"/login\" />} />\r\n                <Route path=\"/login\" element={<Login />} />\r\n                <Route path=\"/user/:userId/home\" element={<Home />} />\r\n                <Route path=\"/user/:userId/list/:id\" element={<List />} />\r\n                <Route path=\"/user/:userId/list/:id/cards\" element={<Cards />} />\r\n                <Route path=\"/user/:userId/list/:id/learn\" element={<Learn />} />\r\n            </Routes>\r\n\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}